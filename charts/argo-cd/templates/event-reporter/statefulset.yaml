{{- if .Values.eventReporter.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  {{- with (mergeOverwrite (deepCopy .Values.global.statefulsetAnnotations) .Values.eventReporter.statefulsetAnnotations) }}
  annotations:
    {{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  name: {{ template "argo-cd.event-reporter.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "argo-cd.labels" (dict "context" . "component" .Values.eventReporter.name "name" .Values.eventReporter.name) | nindent 4 }}
spec:
  replicas: {{ .Values.eventReporter.replicas }}
  # TODO: Remove for breaking release as history limit cannot be patched
  revisionHistoryLimit: 5
  serviceName: {{ include "argo-cd.event-reporter.fullname" . }}
  selector:
    matchLabels:
      {{- include "argo-cd.selectorLabels" (dict "context" . "name" .Values.eventReporter.name) | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/cmd-params: {{ include (print $.Template.BasePath "/argocd-configs/argocd-cmd-params-cm.yaml") . | sha256sum }}
        {{- if (hasKey .Values.server "configEnabled") | ternary .Values.server.configEnabled .Values.configs.cm.create }}
        checksum/cm: {{ include (print $.Template.BasePath "/argocd-configs/argocd-cm.yaml") . | sha256sum }}
        {{- end }}
        {{- with (mergeOverwrite (deepCopy .Values.global.podAnnotations) .Values.eventReporter.podAnnotations) }}
        {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      labels:
        {{- include "argo-cd.labels" (dict "context" . "component" .Values.eventReporter.name "name" .Values.eventReporter.name) | nindent 8 }}
        {{- with (mergeOverwrite (deepCopy .Values.global.podLabels) .Values.eventReporter.podLabels) }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.eventReporter.imagePullSecrets | default .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.eventReporter.priorityClassName | default .Values.global.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      {{- if .Values.eventReporter.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.eventReporter.terminationGracePeriodSeconds }}
      {{- end }}
      serviceAccountName: {{ include "argo-cd.eventReporterServiceAccountName" . }}
      containers:
      - args:
        - /usr/local/bin/event-reporter-server
        - --metrics-port={{ .Values.eventReporter.containerPorts.metrics }}
        {{- with .Values.eventReporter.extraArgs }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        image: {{ default .Values.global.image.repository .Values.eventReporter.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.eventReporter.image.tag }}
        imagePullPolicy: {{ default .Values.global.image.imagePullPolicy .Values.eventReporter.image.imagePullPolicy }}
        name: {{ .Values.eventReporter.name }}
        env:
          {{- with (concat .Values.global.env .Values.eventReporter.env) }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
          - name: EVENT_REPORTER_REPLICAS
            value: {{ .Values.eventReporter.replicas | quote }}
          - name: ARGOCD_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: argocd-token
          - name: ARGOCD_SERVER_ROOTPATH
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: server.rootpath
                optional: true
          - name: CODEFRESH_URL
            valueFrom:
              configMapKeyRef:
                name: codefresh-cm
                key: base-url
                optional: true
          - name: CODEFRESH_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: codefresh-token
          # todo: clean up
          - name: EVENT_REPORTER_INSECURE
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: event-reporter.insecure
                optional: true
          - name: EVENT_REPORTER_LOGFORMAT
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: event-reporter.log.format
                optional: true
          - name: EVENT_REPORTER_LOG_LEVEL
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: event-reporter.log.level
                optional: true
          - name: EVENT_REPORTER_REPO_SERVER
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: repo.server
                optional: true
          - name: EVENT_REPORTER_REPO_SERVER_TIMEOUT_SECONDS
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: event-reporter.repo.server.timeout.seconds
                optional: true
          - name: EVENT_REPORTER_REPO_SERVER_PLAINTEXT
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: event-reporter.repo.server.plaintext
                optional: true
          - name: REDIS_SERVER
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: redis.server
                optional: true
          - name: REDIS_COMPRESSION
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: redis.compression
                optional: true
          - name: REDISDB
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: redis.db
                optional: true
          - name: REDIS_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ default (include "argo-cd.redis.fullname" .) .Values.externalRedis.existingSecret }}
                key: redis-username
                optional: true
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ default (include "argo-cd.redis.fullname" .) .Values.externalRedis.existingSecret }}
                key: redis-password
                optional: true
          - name: EVENT_REPORTER_SHARDING_ALGORITHM
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: event-reporter.sharding.algorithm
                optional: true
          - name: EVENT_REPORTER_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: event-reporter.listen.address
                optional: true
          - name: EVENT_REPORTER_METRICS_LISTEN_ADDRESS
            valueFrom:
              configMapKeyRef:
                name: argocd-cmd-params-cm
                key: event-reporter.metrics.listen.address
                optional: true
        {{- with .Values.eventReporter.envFrom }}
        envFrom:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        ports:
          - name: metrics
            containerPort: {{ .Values.eventReporter.containerPorts.metrics }}
            protocol: TCP
          - name: health
            containerPort: {{ .Values.eventReporter.containerPorts.health }}
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz?full=true
            port: health
          initialDelaySeconds: 3
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: health
          initialDelaySeconds: {{ .Values.eventReporter.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.eventReporter.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.eventReporter.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.eventReporter.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.eventReporter.readinessProbe.failureThreshold }}
        resources:
          {{- toYaml .Values.eventReporter.resources | nindent 10 }}
        {{- with .Values.eventReporter.containerSecurityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
        {{- with .Values.eventReporter.volumeMounts }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: argocd-repo-server-tls
          mountPath: /app/config/server/tls
        - mountPath: /tmp
          name: tmp
      {{- with .Values.eventReporter.extraContainers }}
        {{- tpl (toYaml .) $ | nindent 6 }}
      {{- end }}
      {{- with .Values.eventReporter.initContainers }}
      initContainers:
        {{- tpl (toYaml .) $ | nindent 6 }}
      {{- end }}
      {{- with include "argo-cd.affinity" (dict "context" . "component" .Values.eventReporter) }}
      affinity:
        {{- trim . | nindent 8 }}
      {{- end }}
      {{- with .Values.eventReporter.nodeSelector | default .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.eventReporter.tolerations | default .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.eventReporter.topologySpreadConstraints | default .Values.global.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- range $constraint := . }}
      - {{ toYaml $constraint | nindent 8 | trim }}
          {{- if not $constraint.labelSelector }}
        labelSelector:
          matchLabels:
            {{- include "argo-cd.selectorLabels" (dict "context" $ "name" $.Values.eventReporter.name) | nindent 12 }}
          {{- end }}
        {{- end }}
      {{- end }}
      volumes:
      {{- with .Values.eventReporter.volumes }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
      - emptyDir: { }
        name: plugins-home
      - emptyDir: { }
        name: tmp
      - name: argocd-repo-server-tls
        secret:
          secretName: argocd-repo-server-tls
          optional: true
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
      {{- if .Values.eventReporter.hostNetwork }}
      hostNetwork: {{ .Values.eventReporter.hostNetwork }}
      {{- end }}
      {{- with .Values.eventReporter.dnsConfig }}
      dnsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: {{ .Values.eventReporter.dnsPolicy }}
{{- end }}
