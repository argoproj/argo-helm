{{- if .Values.notifications.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "argo-cd.notifications.fullname" . }}
  labels:
    {{- include "argo-cd.labels" (dict "context" . "component" .Values.notifications.name "name" .Values.notifications.name) | nindent 4 }}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "argo-cd.selectorLabels" (dict "context" . "name" .Values.notifications.name) | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "argo-cd.labels" (dict "context" . "component" .Values.notifications.name "name" .Values.notifications.name) | nindent 8 }}
        {{- with (mergeOverwrite (deepCopy .Values.global.podLabels) .Values.notifications.podLabels) }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with (mergeOverwrite (deepCopy .Values.global.podAnnotations) .Values.notifications.podAnnotations) }}
      annotations:
        {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
    spec:
      {{- with .Values.notifications.imagePullSecrets | default .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.notifications.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      serviceAccountName: {{ include "argo-cd.notifications.serviceAccountName" . }}
      containers:
        - name: {{ .Values.notifications.name }}
          image: {{ default .Values.global.image.repository .Values.notifications.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.notifications.image.tag }}
          imagePullPolicy: {{ default .Values.global.image.imagePullPolicy .Values.notifications.image.imagePullPolicy }}
          command:
            - argocd-notifications
          args:
            - --argocd-repo-server={{ include "argo-cd.repoServer.server" . }}
            - --metrics-port={{ .Values.notifications.containerPorts.metrics }}
            - --loglevel={{ default .Values.global.logging.level .Values.notifications.logLevel }}
            - --logformat={{ default .Values.global.logging.format .Values.notifications.logFormat }}
            {{- range .Values.notifications.args }}
            - {{ . | squote }}
            {{- end }}
          {{- with .Values.notifications.env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.notifications.envFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: metrics
              protocol: TCP
              containerPort: {{ .Values.notifications.containerPorts.metrics }}
          livenessProbe:
            tcpSocket:
              port: metrics
            initialDelaySeconds: {{ .Values.notifications.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.notifications.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.notifications.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.notifications.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.notifications.livenessProbe.failureThreshold }}
          readinessProbe:
            tcpSocket:
              port: metrics
            initialDelaySeconds: {{ .Values.notifications.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.notifications.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.notifications.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.notifications.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.notifications.readinessProbe.failureThreshold }}
          workingDir: /app
          volumeMounts:
            - name: tls-certs
              mountPath: /app/config/tls
            - name: argocd-repo-server-tls
              mountPath: /app/config/reposerver/tls
            {{- with .Values.notifications.volumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.notifications.resources | nindent 12 }}
          {{- with .Values.global.hostAliases }}
          hostAliases:
            {{- toYaml . | nindent 6 }}
          {{- end }}
          {{- with .Values.notifications.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.notifications.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.notifications.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.notifications.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 6 }}
      {{- end }}
      volumes:
        {{- with .Values.notifications.volumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: tls-certs
          configMap:
            name: argocd-tls-certs-cm
        - name: argocd-repo-server-tls
          secret:
            secretName: argocd-repo-server-tls
            optional: true
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
{{- end }}
