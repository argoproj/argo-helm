# Default configuration values for Argo CD
## Ref: https://github.com/argoproj/argo-cd

# -- Provide a name in place of `argocd`
nameOverride: argocd
# -- String to fully override `"argo-cd.fullname"`
fullnameOverride: ""

# -- Enable RedHat OpenShift capabilities
openshift: false

# -- Override the Kubernetes version, which is used to evaluate certain manifests
kubeVersionOverride: ""
# Override APIVersions
# If you want to template helm charts but cannot access k8s API server
# you can set api versions here
apiVersionOverrides:
  # -- String to override apiVersion of cert-manager resources rendered by this helm chart
  certmanager: "" # cert-manager.io/v1
  # -- String to override apiVersion of google cloud resources rendered by this Helm chart
  cloudgoogle: "" # cloud.google.com/v1
  # -- String to override apiVersion of autoscaling rendered by this helm chart
  autoscaling: "" # autoscaling/v2
  # -- String to override apiVersion of ingresses rendered by this helm chart
  ingress: "" # networking.k8s.io/v1beta1
  # -- String to override apiVersion of pod disruption budgets rendered by this helm chart
  pdb: "" # policy/v1

## Custom resource configuration
crds:
  # -- Install and upgrade CRDs
  install: true
  # -- Keep CRDs on chart uninstall
  keep: true
  # -- Annotations to be added to all CRDs
  annotations: {}

# Globally shared configuration
global:
  # -- Default domain used for all components
  ## Used for ingresses, certificates, SSO, notifications, etc.
  domain: argocd.server.local

  # -- Common labels for the all resources
  labels: {}
    # app: argo-cd

  # Default image used by all components
  image:
    # -- If defined, a repository applied to all Argo CD deployments
    repository: quay.io/argoproj/argocd
    # -- Overrides the global Argo CD image tag whose default is the chart appVersion
    tag: ""
    # -- If defined, a imagePullPolicy applied to all Argo CD deployments
    imagePullPolicy: IfNotPresent

  # -- If defined, uses a Secret to pull an image from a private Docker registry or repository
  imagePullSecrets: []

  # -- Annotations for the all deployed pods
  podAnnotations: {}

  # -- Labels for the all deployed pods
  podLabels: {}

  # Default logging options used by all components
  logging:
    # -- Set the global logging format. Either: `text` or `json`
    format: text
    # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
    level: info

  # Default RBAC configuration
  rbac:
    # -- Create agggregate roles that extend existing clusterroles to interact with argo-cd crds
    ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
    aggregateRoles: true
    # -- Create cluster admin roles for cluster-wide installation.
    ## Used when you manage applications in the same cluster where Argo CD runs
    clusterAdmin: true

  # Default network policy rules used by all components
  networkPolicy:
    # -- Create NetworkPolicy objects for all components
    create: false
    # -- Default deny all ingress traffic
    defaultDenyIngress: false

  # Affinity for all components
  affinity:
    # -- Default pod anti-affinity rules. Either: `soft` or `hard`
    podAntiAffinity: soft
    # Node affinity rules
    nodeAffinity:
      # -- Default node affinity rules. Either: `soft` or `hard`
      type: hard
      # -- Default match expressions for node affinity
      matchExpressions: []
      # - key: topology.kubernetes.io/zone
      #   operator: In
      #   values:
      #    - antarctica-east1
      #    - antarctica-west1

  # -- Mapping between IP and hostnames that will be injected as entries in the pod's hosts files
  hostAliases: []
  # - ip: 10.20.30.40
  #   hostnames:
  #   - git.myhostname

  # -- Toggle and define pod-level security context.
  securityContext: {}
  #  runAsUser: 999
  #  runAsGroup: 999
  #  fsGroup: 999

# -- Array of extra K8s manifests to deploy
extraObjects: []
  # - apiVersion: secrets-store.csi.x-k8s.io/v1
  #   kind: SecretProviderClass
  #   metadata:
  #     name: argocd-secrets-store
  #   spec:
  #     provider: aws
  #     parameters:
  #       objects: |
  #         - objectName: "argocd"
  #           objectType: "secretsmanager"
  #           jmesPath:
  #               - path: "client_id"
  #                 objectAlias: "client_id"
  #               - path: "client_secret"
  #                 objectAlias: "client_secret"
  #     secretObjects:
  #     - data:
  #       - key: client_id
  #         objectName: client_id
  #       - key: client_secret
  #         objectName: client_secret
  #       secretName: argocd-secrets-store
  #       type: Opaque
  #       labels:
  #         app.kubernetes.io/part-of: argocd

## Argo Configs
configs:
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    # -- Create the argocd-cm configmap for [Declarative setup]
    create: true

    # -- Annotations to be added to argocd-cm configmap
    annotations: {}

    # The metadata.label key name where Argo CD injects the app name as a tracking label (optional).
    # Tracking labels are used to determine which resources need to be deleted when pruning.
    # If omitted, Argo CD injects the app name into the label: 'app.kubernetes.io/instance'
    application.instanceLabelKey: argocd.argoproj.io/instance

    # Enable logs RBAC enforcement
    # Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/upgrading/2.3-2.4/#enable-logs-rbac-enforcement
    server.rbac.log.enforce.enable: "false"

    # exec.enabled indicates whether the UI exec feature is enabled. It is disabled by default.
    # Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
    exec.enabled: "false"

    # admin.enabled indicates whether the admin user is enabled. It is enabled by default.
    # https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
    admin.enabled: "true"

    # Application reconciliation timeout is the max amount of time required to discover if a new manifests version got
    # published to the repository. Reconciliation by timeout is disabled if timeout is set to 0. Three minutes by default.
    timeout.reconciliation: 180s

    # Timeout to refresh application data as well as target manifests cache
    timeout.hard.reconciliation: "0"

    # Dex configuration
    # dex.config: |
    #   connectors:
    #     # GitHub example
    #     - type: github
    #       id: github
    #       name: GitHub
    #       config:
    #         clientID: aabbccddeeff00112233
    #         clientSecret: $dex.github.clientSecret # Alternatively $<some_K8S_secret>:dex.github.clientSecret
    #         orgs:
    #         - name: your-github-org

    # OIDC configuration as an alternative to dex (optional).
    # oidc.config: |
    #   name: AzureAD
    #   issuer: https://login.microsoftonline.com/TENANT_ID/v2.0
    #   clientID: CLIENT_ID
    #   clientSecret: $oidc.azuread.clientSecret
    #   requestedIDTokenClaims:
    #     groups:
    #       essential: true
    #   requestedScopes:
    #     - openid
    #     - profile
    #     - email

  # Argo CD configuration parameters
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
  params:
    # -- Annotations to be added to the argocd-cmd-params-cm ConfigMap
    annotations: {}

    ## Generic parameters
    # -- Open-Telemetry collector address: (e.g. "otel-collector:4317")
    otlp.address: ''

    ## Controller Properties
    # -- Number of application status processors
    controller.status.processors: 20
    # -- Number of application operation processors
    controller.operation.processors: 10
    # -- Specifies timeout between application self heal attempts
    controller.self.heal.timeout.seconds: 5
    # -- Repo server RPC call timeout seconds.
    controller.repo.server.timeout.seconds: 60

    ## Server properties
    # -- Run server without TLS
    server.insecure: false
    # -- Disable Argo CD RBAC for user authentication
    server.disable.auth: false
    # -- Enable GZIP compression
    server.enable.gzip: false
    # -- Set X-Frame-Options header in HTTP responses to value. To disable, set to "".
    server.x.frame.options: sameorigin

    ## Repo-server properties
    # -- Limit on number of concurrent manifests generate requests. Any value less the 1 means no limit.
    reposerver.parallelism.limit: 0

  # Argo CD RBAC policy configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
  rbac:
    # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
    # If false, it is expected the configmap will be created by something else.
    # Argo CD will not work if there is no configmap created with the name above.
    create: true

    # -- Annotations to be added to argocd-rbac-cm configmap
    annotations: {}

    # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
    # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
    policy.default: ''

    # -- File containing user-defined policies and role definitions.
    # @default -- `''` (See [values.yaml])
    policy.csv: ''
    # Policy rules are in the form:
    #  p, subject, resource, action, object, effect
    # Role definitions and bindings are in the form:
    #  g, subject, inherited-subject
    # policy.csv |
    #   p, role:org-admin, applications, *, */*, allow
    #   p, role:org-admin, clusters, get, *, allow
    #   p, role:org-admin, repositories, *, *, allow
    #   p, role:org-admin, logs, get, *, allow
    #   p, role:org-admin, exec, create, */*, allow
    #   g, your-github-org:your-team, role:org-admin

    # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
    # The scope value can be a string, or a list of strings.
    scopes: "[groups]"

  # Argo CD credentials configuration
  creds:
    # -- Provide one or multiple [external cluster credentials]
    # @default -- `[]` (See [values.yaml])
    ## Ref:
    ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters
    ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/security/#external-cluster-credentials
    clusters: []
      # - name: mycluster
      #   server: https://mycluster.com
      #   labels: {}
      #   annotations: {}
      #   config:
      #     bearerToken: "<authentication token>"
      #     tlsClientConfig:
      #       insecure: false
      #       caData: "<base64 encoded certificate>"
      # - name: mycluster2
      #   server: https://mycluster2.com
      #   labels: {}
      #   annotations: {}
      #   namespaces: namespace1,namespace2
      #   clusterResources: true
      #   config:
      #     bearerToken: "<authentication token>"
      #     tlsClientConfig:
      #       insecure: false
      #       caData: "<base64 encoded certificate>"

    # -- Credentials to be used by a single repository
    # @default -- `{}` (See [values.yaml])
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repository-credentials
    ## Note: the last example in the list would use a `https-creds` credential template, configured under "configs.credentials.templates".
    repositories: {}
      # istio-helm-repo:
      #   annotations: {}
      #   labels: {}
      #   type: helm
      #   url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts
      #   name: istio.io
      # private-helm-repo:
      #   annotations: {}
      #   labels: {}
      #   url: https://my-private-chart-repo.internal
      #   name: private-repo
      #   type: helm
      #   password: my-password
      #   username: my-username
      # private-git-repo:
      #   annotations: {}
      #   labels: {}
      #   url: https://github.com/argoproj/private-repo

    # -- Credentials to be used as a template for multiple repositories
    # @default -- `{}` (See [values.yaml])
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repository-credentials
    templates: {}
      # github-enterprise:
      #   annotations: {}
      #   url: https://github.com/argoproj
      #   type: helm
      #   githubAppID: 1
      #   githubAppInstallationID: 2
      #   githubAppEnterpriseBaseUrl: https://ghe.example.com/api/v3
      #   githubAppPrivateKey: |
      #     -----BEGIN OPENSSH PRIVATE KEY-----
      #     ...
      #     -----END OPENSSH PRIVATE KEY-----
      # https:
      #   annotations: {}
      #   url: https://github.com/argoproj
      #   type: helm
      #   password: my-password
      #   username: my-username
      # ssh:
      #  annotations: {}
      #  url: git@github.com:argoproj-labs
      #  type: helm
      #  sshPrivateKey: |
      #    -----BEGIN OPENSSH PRIVATE KEY-----
      #    ...
      #    -----END OPENSSH PRIVATE KEY-----

  # Additional secrets used by Argo CD
  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
  ## Note: Additional secrets are as generic key:value pairs
  secret:
    # -- Create the argocd-secret
    create: true
    # -- Annotations to be added to argocd-secret
    annotations: {}

    # -- Shared secret for authenticating GitHub webhook events
    githubSecret: ""
    # -- Shared secret for authenticating GitLab webhook events
    gitlabSecret: ""
    # -- Shared secret for authenticating BitbucketServer webhook events
    bitbucketServerSecret: ""
    # -- UUID for authenticating Bitbucket webhook events
    bitbucketUUID: ""
    # -- Shared secret for authenticating Gogs webhook events
    gogsSecret: ""

    # -- Bcrypt hashed admin password
    ## Argo expects the password in the secret to be bcrypt hashed. You can create this hash with
    ## `htpasswd -nbBC 10 "" $ARGO_PWD | tr -d ':\n' | sed 's/$2y/$2a/'`
    admin.password: ''

  # GnuPG commit signature verification
  # Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/
  gpg:
    # -- Annotations to be added to argocd-gpg-keys-cm configmap
    annotations: {}

    # -- GnuPG keys to add to the key ring
    # @default -- `{}` (See [values.yaml])
    keys: {}
      # keys:
      #  4AEE18F83AFDEB23: |
      #    -----BEGIN PGP PUBLIC KEY BLOCK-----
      #    (...)
      #    -----END PGP PUBLIC KEY BLOCK-----

  # SSH known hosts public keys config
  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#ssh-known-host-public-keys
  ssh:
    # -- Annotations to be added to argocd-ssh-known-hosts-cm configmap
    annotations: {}

    # -- Known hosts to be added to the known host list by default.
    # @default -- See [values.yaml]
    knownHosts: |
      bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
      github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
      github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
      github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
      gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
      gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
      gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
      ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
      vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H

    # -- Add extra known hosts to the argocd-ssh-known-hosts-cm configmap
    createExtraKnownHosts: true

    # -- Add extra known hosts to the known hosts list
    # @default -- `""` (See [values.yaml])
    extraKnownHosts: ''
      # extraKnownHosts: |
      #   gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
      #   gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9

  # TLS certificates for repositories
  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories-using-self-signed-tls-certificates-or-are-signed-by-custom-ca
  tls:
    # -- Annotations to be added to argocd-tls-certs-cm configmap
    annotations: {}

    # -- TLS certificates
    # @default -- `""` (See [values.yaml])
    certs: {}
      # certs:
      #   argocd.example.com: |
      #     -----BEGIN CERTIFICATE-----
      #     (...)
      #     -----END CERTIFICATE-----

  # Notification services configuration
  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/
  notifications:
    # -- Create argocd-notifications-cm and argocd-notifications-secret
    create: true

    # -- Annotations to be added into argocd-notifications-cm and argocd-notifications-secret
    annotations: {}

    # -- Define user-defined context
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/#defining-user-defined-context
    context: {}
      # region: east
      # environment: staging

    # -- Generic key:value pairs to be inserted into the secret
    # @default -- `{}` (See [values.yaml])
    ## Can be used for templates, notification services etc. Some examples given below.
    ## Ref: https://argocd-notifications.readthedocs.io/en/stable/services/overview/
    secret:
      # Ref: https://argocd-notifications.readthedocs.io/en/stable/services/slack/
      # slack-token: ''
      # Ref: https://argocd-notifications.readthedocs.io/en/stable/services/grafana/
      # grafana-apiKey: ''
      # Ref: https://argocd-notifications.readthedocs.io/en/stable/services/email/
      # email-username: ''
      # email-password: ''

    # -- Configures notification services such as slack, email or custom webhooks
    # @default -- `{}` (See [values.yaml])
    notifiers: {}
      # Slack notification service
      ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack/
      # service.slack: |
      #   token: $slack-token

    # -- Centrally managed global application subscriptions
    # @default -- `[]` (See [values.yaml])
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions/
    subscriptions: []
      # # Subscription for on-sync-status-unknown trigger notifications
      # - recipients:
      #   - slack:test2
      #   - email:test@gmail.com
      #   triggers:
      #   - on-sync-status-unknown
      # # Subscription restricted to applications with matching labels only
      # - recipients:
      #   - slack:test3
      #   selector: test=true
      #   triggers:
      #   - on-sync-status-unknown

    # -- The trigger defines the condition when the notification should be sent
    # @default -- `{}` (See [values.yaml])
    ## Ref:
    ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/
    ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog/
    triggers: {}
      # defaultTriggers: |
      #   - on-sync-status-unknown
      # trigger.on-deployed: |
      #   - description: Application is synced and healthy. Triggered once per commit.
      #     oncePer: app.status.sync.revision
      #     send:
      #     - app-deployed
      #     when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      # trigger.on-health-degraded: |
      #   - description: Application has degraded
      #     send:
      #     - app-health-degraded
      #     when: app.status.health.status == 'Degraded'
      # trigger.on-sync-failed: |
      #   - description: Application syncing has failed
      #     send:
      #     - app-sync-failed
      #     when: app.status.operationState.phase in ['Error', 'Failed']
      # trigger.on-sync-running: |
      #   - description: Application is being synced
      #     send:
      #     - app-sync-running
      #     when: app.status.operationState.phase in ['Running']
      # trigger.on-sync-status-unknown: |
      #   - description: Application status is 'Unknown'
      #     send:
      #     - app-sync-status-unknown
      #     when: app.status.sync.status == 'Unknown'
      # trigger.on-sync-succeeded: |
      #   - description: Application syncing has succeeded
      #     send:
      #     - app-sync-succeeded
      #     when: app.status.operationState.phase in ['Succeeded']

    # -- The notification template is used to generate the notification content
    # @default -- `{}` (See [values.yaml])
    ## Ref:
    ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/
    ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/catalog/
    templates: {}
      # template.app-deployed: |
      #   email:
      #     subject: New version of an application {{.app.metadata.name}} is up and running.
      #   message: |
      #     {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
      #   slack:
      #     attachments: |
      #       [{
      #         "title": "{{ .app.metadata.name}}",
      #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
      #         "color": "#18be52",
      #         "fields": [
      #         {
      #           "title": "Sync Status",
      #           "value": "{{.app.status.sync.status}}",
      #           "short": true
      #         },
      #         {
      #           "title": "Repository",
      #           "value": "{{.app.spec.source.repoURL}}",
      #           "short": true
      #         },
      #         {
      #           "title": "Revision",
      #           "value": "{{.app.status.sync.revision}}",
      #           "short": true
      #         }
      #         {{range $index, $c := .app.status.conditions}}
      #         {{if not $index}},{{end}}
      #         {{if $index}},{{end}}
      #         {
      #           "title": "{{$c.type}}",
      #           "value": "{{$c.message}}",
      #           "short": true
      #         }
      #         {{end}}
      #         ]
      #       }]
      # template.app-health-degraded: |
      #   email:
      #     subject: Application {{.app.metadata.name}} has degraded.
      #   message: |
      #     {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
      #     Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
      #   slack:
      #     attachments: |-
      #       [{
      #         "title": "{{ .app.metadata.name}}",
      #         "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
      #         "color": "#f4c030",
      #         "fields": [
      #         {
      #           "title": "Sync Status",
      #           "value": "{{.app.status.sync.status}}",
      #           "short": true
      #         },
      #         {
      #           "title": "Repository",
      #           "value": "{{.app.spec.source.repoURL}}",
      #           "short": true
      #         }
      #         {{range $index, $c := .app.status.conditions}}
      #         {{if not $index}},{{end}}
      #         {{if $index}},{{end}}
      #         {
      #           "title": "{{$c.type}}",
      #           "value": "{{$c.message}}",
      #           "short": true
      #         }
      #         {{end}}
      #         ]
      #       }]
      # template.app-sync-failed: |
      #   email:
      #     subject: Failed to sync application {{.app.metadata.name}}.
      #   message: |
      #     {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
      #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      #   slack:
      #     attachments: |-
      #       [{
      #         "title": "{{ .app.metadata.name}}",
      #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
      #         "color": "#E96D76",
      #         "fields": [
      #         {
      #           "title": "Sync Status",
      #           "value": "{{.app.status.sync.status}}",
      #           "short": true
      #         },
      #         {
      #           "title": "Repository",
      #           "value": "{{.app.spec.source.repoURL}}",
      #           "short": true
      #         }
      #         {{range $index, $c := .app.status.conditions}}
      #         {{if not $index}},{{end}}
      #         {{if $index}},{{end}}
      #         {
      #           "title": "{{$c.type}}",
      #           "value": "{{$c.message}}",
      #           "short": true
      #         }
      #         {{end}}
      #         ]
      #       }]
      # template.app-sync-running: |
      #   email:
      #     subject: Start syncing application {{.app.metadata.name}}.
      #   message: |
      #     The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
      #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      #   slack:
      #     attachments: |-
      #       [{
      #         "title": "{{ .app.metadata.name}}",
      #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
      #         "color": "#0DADEA",
      #         "fields": [
      #         {
      #           "title": "Sync Status",
      #           "value": "{{.app.status.sync.status}}",
      #           "short": true
      #         },
      #         {
      #           "title": "Repository",
      #           "value": "{{.app.spec.source.repoURL}}",
      #           "short": true
      #         }
      #         {{range $index, $c := .app.status.conditions}}
      #         {{if not $index}},{{end}}
      #         {{if $index}},{{end}}
      #         {
      #           "title": "{{$c.type}}",
      #           "value": "{{$c.message}}",
      #           "short": true
      #         }
      #         {{end}}
      #         ]
      #       }]
      # template.app-sync-status-unknown: |
      #   email:
      #     subject: Application {{.app.metadata.name}} sync status is 'Unknown'
      #   message: |
      #     {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
      #     Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
      #     {{if ne .serviceType "slack"}}
      #     {{range $c := .app.status.conditions}}
      #         * {{$c.message}}
      #     {{end}}
      #     {{end}}
      #   slack:
      #     attachments: |-
      #       [{
      #         "title": "{{ .app.metadata.name}}",
      #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
      #         "color": "#E96D76",
      #         "fields": [
      #         {
      #           "title": "Sync Status",
      #           "value": "{{.app.status.sync.status}}",
      #           "short": true
      #         },
      #         {
      #           "title": "Repository",
      #           "value": "{{.app.spec.source.repoURL}}",
      #           "short": true
      #         }
      #         {{range $index, $c := .app.status.conditions}}
      #         {{if not $index}},{{end}}
      #         {{if $index}},{{end}}
      #         {
      #           "title": "{{$c.type}}",
      #           "value": "{{$c.message}}",
      #           "short": true
      #         }
      #         {{end}}
      #         ]
      #       }]
      # template.app-sync-succeeded: |
      #   email:
      #     subject: Application {{.app.metadata.name}} has been successfully synced.
      #   message: |
      #     {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
      #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      #   slack:
      #     attachments: |-
      #       [{
      #         "title": "{{ .app.metadata.name}}",
      #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
      #         "color": "#18be52",
      #         "fields": [
      #         {
      #           "title": "Sync Status",
      #           "value": "{{.app.status.sync.status}}",
      #           "short": true
      #         },
      #         {
      #           "title": "Repository",
      #           "value": "{{.app.spec.source.repoURL}}",
      #           "short": true
      #         }
      #         {{range $index, $c := .app.status.conditions}}
      #         {{if not $index}},{{end}}
      #         {{if $index}},{{end}}
      #         {
      #           "title": "{{$c.type}}",
      #           "value": "{{$c.message}}",
      #           "short": true
      #         }
      #         {{end}}
      #         ]
      #       }]

  # -- Define custom [CSS styles] for your Argo instance.
  # This setting will automatically mount the provided CSS and reference it in the argo configuration.
  # @default -- `""` (See [values.yaml])
  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/
  styles: ""
    # styles: |
    #  .nav-bar {
    #    background: linear-gradient(to bottom, #999, #777, #333, #222, #111);
    #  }

## Controller
controller:
  # -- Application controller name string
  name: application-controller

  # -- The number of application controller pods to run.
  # Additional replicas will cause sharding of managed clusters across number of replicas.
  replicas: 1

  # Pod Disruption Budget configuration
  pdb:
    # -- Deploy a [PodDisruptionBudget] for the application controller
    enabled: false
    # -- Labels to be added to application controller pdb
    labels: {}
    # -- Annotations to be added to application controller pdb
    annotations: {}
    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
    # @default -- `""` (defaults to 0 if not specified)
    minAvailable: ""
    # -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).
    # Takes higher precedence than `controller.pdb.minAvailable`
    maxUnavailable: ""

  image:
    # -- Repository to use for the application controller
    # @default -- `""` (defaults to global.image.repository)
    repository: ""
    # -- Tag to use for the application controller
    # @default -- `""` (defaults to global.image.tag)
    tag: ""
    # -- Image pull policy for the application controller
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Secrets with credentials to pull images from a private registry
  imagePullSecrets: []

  # -- Application controller commandline flags
  args: []

  # -- Environment variables to pass to application controller
  env: []

  # -- envFrom to pass to application controller
  # @default -- `[]` (See [values.yaml])
  envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Annotations to be added to application controller pods
  podAnnotations: {}

  # -- Labels to be added to application controller pods
  podLabels: {}

  # Application controller container ports
  containerPorts:
    # -- Metrics container port
    metrics: 8082

  # -- Application controller container-level security context
  # @default -- See [values.yaml]
  containerSecurityContext:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL

  # Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  readinessProbe:
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3

  livenessProbe:
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3


  # -- Resource limits and requests for the application controller pods
  resources: {}
  #  limits:
  #    cpu: 500m
  #    memory: 512Mi
  #  requests:
  #    cpu: 250m
  #    memory: 256Mi

  # -- Additional volumes to the application controller pod
  volumes: []

  # -- Additional volumeMounts to the application controller main container
  volumeMounts: []
  #  - mountPath: /usr/local/bin/helm
  #    name: custom-tools
  #    subPath: helm

  # -- Init containers to add to the application controller pod
  ## If your target Kubernetes cluster(s) require a custom auth provider executable
  ## you could use this (and the same in the server pod) to bootstrap
  ## that executable into your Argo CD container
  initContainers: []
  #  - name: download-tools
  #    image: alpine:3.8
  #    command: [sh, -c]
  #    args:
  #      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - &&
  #        mv linux-amd64/helm /custom-tools/
  #    volumeMounts:
  #      - mountPath: /custom-tools
  #        name: custom-tools

  # -- Additional containers to be added to the application controller pod
  extraContainers: []

  # -- Priority class for the application controller pods
  priorityClassName: ""

  # -- [Node selector]
  nodeSelector: {}

  # -- [Tolerations] for use with node taints
  tolerations: []

  # -- Assign custom [affinity] rules to the deployment
  # @default -- `{}` (defaults to `global.affinity` presets)
  affinity: {}

  # -- Assign custom [TopologySpreadConstraints] rules to the application controller
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

  # Controller custom RBAC configuration
  ## Use this to grant additional permissions
  clusterAdminRbac:
    # -- Enable custom RBAC rules when `rbac.clusterAdmin` is enabled
    enabled: false
    # -- List of custom ClusterRole rules for controller
    rules: []

  # Application controller metrics configuration
  metrics:
    # -- Deploy metrics service
    enabled: false

    # Expose application labels as Prometheus metric
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics/#exposing-application-labels-as-prometheus-metrics
    applicationLabels:
      # -- Enables additional labels in argocd_app_labels metric
      enabled: false
      # -- Additional labels
      labels: []

    # Application controller metrics service configuration
    service:
      # -- Metrics service annotations
      annotations: {}
      # -- Metrics service labels
      labels: {}
      # -- Metrics service port
      port: 8082
      # -- Metrics service port name
      portName: http-metrics

    # Prometheus ServiceMonitor configuration
    serviceMonitor:
      # -- Enable a ServiceMonitor
      enabled: false
      # -- Labels to be added to the ServiceMonitor
      labels: {}
      # -- Namespace where to deploy ServiceMonitor
      namespace: ""
      # -- Interval at which are Prometheus metrics scraped
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: []
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: []
      # -- ServiceMonitor HTTP scheme used for scraping
      scheme: ""
      # -- ServiceMonitor tlsConfig for scraping the endpoint
      tlsConfig: {}

    rules:
      # -- Deploy a PrometheusRule for the application controller
      enabled: false
      # -- PrometheusRule.Spec for the application controller
      spec: []
      # - alert: ArgoAppMissing
      #   expr: |
      #     absent(argocd_app_info) == 1
      #   for: 15m
      #   labels:
      #     severity: critical
      #   annotations:
      #     summary: "[Argo CD] No reported applications"
      #     description: >
      #       Argo CD has not reported any applications data for the past 15 minutes which
      #       means that it must be down or not functioning properly.  This needs to be
      #       resolved for this cloud to continue to maintain state.
      # - alert: ArgoAppNotSynced
      #   expr: |
      #     argocd_app_info{sync_status!="Synced"} == 1
      #   for: 12h
      #   labels:
      #     severity: warning
      #   annotations:
      #     summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
      #     description: >
      #       The application [{{`{{$labels.name}}`}} has not been synchronized for over
      #       12 hours which means that the state of this cloud has drifted away from the
      #       state inside Git.

  # Controller service account
  serviceAccount:
    # -- Create a service account for the application controller
    create: true
    # -- Controller service account name
    name: ""
    # -- Annotations applied to created service account
    annotations: {}
    # -- Labels applied to created service account
    labels: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true

## Server
server:
  # -- Argo CD server name
  name: server

  # -- The number of server pods to run
  replicas: 1

  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo CD server
    enabled: false
    # -- Minimum number of replicas for the Argo CD server [HPA]
    minReplicas: 1
    # -- Maximum number of replicas for the Argo CD server [HPA]
    maxReplicas: 5
    # -- Average CPU utilization percentage for the Argo CD server [HPA]
    targetCPUUtilizationPercentage: 50
    # -- Average memory utilization percentage for the Argo CD server [HPA]
    targetMemoryUtilizationPercentage: 50
    # -- Configures the scaling behavior of the target in both Up and Down directions.
    # This is only available on HPA apiVersion `autoscaling/v2beta2` and newer
    behavior: {}
      # scaleDown:
      #  stabilizationWindowSeconds: 300
      #  policies:
      #   - type: Pods
      #     value: 1
      #     periodSeconds: 180
      # scaleUp:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Pods
      #     value: 2
      #     periodSeconds: 60

  # Pod Disruption Budget configuration
  pdb:
    # -- Deploy a [PodDisruptionBudget] for the server
    enabled: false
    # -- Labels to be added to server pdb
    labels: {}
    # -- Annotations to be added to server pdb
    annotations: {}
    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
    # @default -- `""` (defaults to 0 if not specified)
    minAvailable: ""
    # -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).
    # Takes higher precedence than `server.pdb.minAvailable`
    maxUnavailable: ""

  image:
    # -- Repository to use for the Argo CD server
    # @default -- `""` (defaults to global.image.repository)
    repository: "" # defaults to global.image.repository
    # -- Tag to use for the Argo CD server
    # @default -- `""` (defaults to global.image.tag)
    tag: "" # defaults to global.image.tag
    # -- Image pull policy for the Argo CD server
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: "" # IfNotPresent

  # -- Secrets with credentials to pull images from a private registry
  imagePullSecrets: []

  # -- Additional command line arguments to pass to Argo CD server
  args: []

  # -- Environment variables to pass to Argo CD server
  env: []

  # -- envFrom to pass to Argo CD server
  # @default -- `[]` (See [values.yaml])
  envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Specify postStart and preStop lifecycle hooks for your argo-cd-server container
  lifecycle: {}

  # -- Annotations to be added to server pods
  podAnnotations: {}

  # -- Labels to be added to server pods
  podLabels: {}

  # Server container ports
  containerPorts:
    # -- Server container port
    server: 8080
    # -- Metrics container port
    metrics: 8082

  # -- Server container-level security context
  # @default -- See [values.yaml]
  containerSecurityContext:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL

  # Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  readinessProbe:
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3

  livenessProbe:
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3

  # -- Resource limits and requests for the Argo CD server
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 50m
  #    memory: 64Mi

  # -- Additional volumes to the server pod
  volumes: []

  # -- Additional volumeMounts to the server main container
  volumeMounts: []
  #  - mountPath: /usr/local/bin/helm
  #    name: custom-tools
  #    subPath: helm

  # -- Init containers to add to the server pod
  ## If your target Kubernetes cluster(s) require a custom auth provider executable
  ## you could use this (and the same in the application controller pod) to bootstrap
  ## that executable into your Argo CD container
  initContainers: []
  #  - name: download-tools
  #    image: alpine:3.8
  #    command: [sh, -c]
  #    args:
  #      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - &&
  #        mv linux-amd64/helm /custom-tools/
  #    volumeMounts:
  #      - mountPath: /custom-tools
  #        name: custom-tools

  # -- Additional containers to be added to the server pod
  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
  extraContainers: []
  # - name: my-sidecar
  #   image: nginx:latest
  # - name: lemonldap-ng-controller
  #   image: lemonldapng/lemonldap-ng-controller:0.2.0
  #   args:
  #     - /lemonldap-ng-controller
  #     - --alsologtostderr
  #     - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration
  #   env:
  #     - name: POD_NAME
  #       valueFrom:
  #         fieldRef:
  #           fieldPath: metadata.name
  #     - name: POD_NAMESPACE
  #       valueFrom:
  #         fieldRef:
  #           fieldPath: metadata.namespace
  #   volumeMounts:
  #   - name: copy-portal-skins
  #     mountPath: /srv/var/lib/lemonldap-ng/portal/skins

  # Server UI extensions
  ## Ref: https://github.com/argoproj-labs/argocd-extensions
  extensions:
    # -- Enable support for extensions
    ## This function in tech preview stage, do expect unstability or breaking changes in newer versions. Bump image.tag if necessary.
    enabled: false

    image:
      # -- Repository to use for extensions image
      repository: ghcr.io/argoproj-labs/argocd-extensions
      # -- Tag to use for extensions image
      tag: v0.1.0
      # -- Image pull policy for extensions
      # @default -- `""` (defaults to global.image.imagePullPolicy)
      imagePullPolicy: ""

    # -- Extensions to be loaded into the server
    contents: []
    # - name: argo-rollouts
    #   url: https://github.com/argoproj-labs/rollout-extension/releases/download/v0.2.1/extension.tar

    # -- Server UI extensions container-level security context
    # @default -- See [values.yaml]
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - "ALL"

    # -- Resource limits and requests for the argocd-extensions container
    resources: {}
    #  limits:
    #    cpu: 50m
    #    memory: 128Mi
    #  requests:
    #    cpu: 10m
    #    memory: 64Mi

  # -- Priority class for the Argo CD server
  priorityClassName: ""

  # -- [Node selector]
  nodeSelector: {}

  # -- [Tolerations] for use with node taints
  tolerations: []

  # -- Assign custom [affinity] rules to the deployment
  # @default -- `{}` (defaults to `global.affinity` presets)
  affinity: {}

  # -- Assign custom [TopologySpreadConstraints] rules to the Argo CD server
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

  # Server custom RBAC configuration
  ## Use this to grant additional permissions
  clusterAdminRbac:
    # -- Enable custom RBAC rules when `rbac.clusterAdmin` is enabled
    enabled: false
    # -- List of custom ClusterRole rules for server
    rules: []

  # TLS certificate configuration via cert-manager
  certificate:
    # -- Deploy a Certificate resource
    enabled: false
    # -- Certificate primary domain (commonName)
    # @default -- `""` (defaults to `global.domain`)
    domain: ""
    # -- Certificate Subject Alternate Names (SANs)
    additionalHosts: []
    # -- The requested 'duration' (i.e. lifetime) of the Certificate. Value must be in units accepted by Go time.ParseDuration
    duration: ""
    # -- How long before the currently issued certificate's expiry cert-manager should renew the certificate. Value must be in units accepted by Go time.ParseDuration
    renewBefore: ""
    issuer:
      # -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
      group: ""
      # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
      kind: ""
      # -- Certificate isser name. Eg. `letsencrypt`
      name: ""
    # Private key of the certificate
    privateKey:
      # -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
      rotationPolicy: Never
      # -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
      encoding: PKCS1
      # -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
      algorithm: RSA
      # -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
      size: 2048

  # TLS certificate configuration via Secret
  certificateSecret:
    # -- Create argocd-server-tls secret
    enabled: false
    # -- Annotations to be added to argocd-server-tls secret
    annotations: {}
    # -- Private Key of the certificate
    key: ''
    # -- Certificate data
    crt: ''
    # crt: |
    #   -----BEGIN CERTIFICATE-----
    #   <cert data>
    #   -----END CERTIFICATE-----
    #   -----BEGIN CERTIFICATE-----
    #   <ca cert data>
    #   -----END CERTIFICATE-----

  # Argo CD server ingress configuration
  ingress:
    # -- Enable an ingress resource for the Argo CD server
    enabled: false
    # -- Additional ingress labels
    labels: {}
    # -- Additional ingress annotations
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      # nginx.ingress.kubernetes.io/ssl-passthrough: "true"

    # -- When ingress is enabled, a host pointing to this will be created
    # @default -- `""` (defaults to `global.domain`)
    hostname: ""

    # -- Defines which ingress controller will implement the resource
    ingressClassName: ""

    # -- The path to Argo CD server
    ## NOTE: You may need to set this to `/*` in order to use this with ALB ingress controller
    path: /

    # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    pathType: Prefix

    # TLS options
    tls:
      # -- Enable TLS for hostname defined in `server.ingress.hostname`
      enabled: true
      # -- The name of secret to use for TLS certificate
      ## NOTE: Set to argocd-tls-secret if using `certificate` or `certificateSecret`
      secretName: argocd-secret

    # -- List of additional hosts
    # @default -- `[]` (See [values.yaml])
    extraHosts: []
      #  - name: argocd.server.local
      #    path: /

    # -- Additional ingress paths
    # @default -- `[]` (See [values.yaml])
    extraPaths: []
      # - path: /*
      #   backend:
      #     serviceName: ssl-redirect
      #     servicePort: use-annotation
      ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
      # - path: /*
      #   pathType: Prefix
      #   backend:
      #     service:
      #       name: ssl-redirect
      #       port:
      #         name: use-annotation

    # -- Additional TLS configuration for additional hosts
    # @default -- `[]` (See [values.yaml])
    ## NOTE: Secrets must be created manually before
    extraTls: []
      # - secretName: argocd-tls-certificate
      #   hosts:
      #     - argocd.example.com

    # Amazon Load Balancer configuration
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#aws-application-load-balancers-albs-and-classic-elb-http-mode
    alb:
      # -- Enable Amazon Load Balancer features
      enabled: false
      # -- Service type for the AWS ALB gRPC service
      ## Can be of type `ClusterIP` or `NodePort``depending on which mode you are
      ## are running. Instance mode needs NodePort, IP mode needs ClusterIP
      ## Ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/how-it-works/#ingress-traffic
      serviceType: ClusterIP
      # -- Backend protocol version for the AWS ALB gRPC service
      ## This tells AWS to send traffic from the ALB using HTTP2. Can use gRPC as well if you want to leverage gRPC specific features
      backendProtocolVersion: HTTP2

    # Google Load Balancer config
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#google-cloud-load-balancers-with-kubernetes-ingress
    gke:
      # -- Enable Google Load Balancer features
      enabled: false
      # -- Google [BackendConfig] resource, for use with the GKE Ingress Controller
      # @default -- `{}` (See [values.yaml])
      ## Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters
      backendConfig: {}
        # iap:
        #  enabled: true
        #    oauthclientCredentials:
        #      secretName: argocd-secret
      # -- Google [FrontendConfig] resource, for use with the GKE Ingress Controller
      # @default -- `{}` (See [values.yaml])
      ## Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters
      frontendConfig: {}
        #  redirectToHttps:
        #    enabled: true
        #    responseCodeName: RESPONSE_CODE
      # -- Additional domains for Google ManagedCertificate resource
      ## Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs
      domains: []

    # Dedicated gRPC ingress configuration
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts
    grpc:
      # -- Enable dedicated gRPC ingress
      enabled: false
      # -- Hostname for dedicated  gRPC ingress
      # @default -- `""` (Defaults to `grpc.<server.ingress.hostname>`)
      hostname: ""
      # -- Annotations for gRPC ingress
      annotations: {}
        # nginx.ingress.kubernetes.io/backend-protocol: GRPC
        # traefik.ingress.kubernetes.io/service.serversscheme: h2c

  # Create a OpenShift Route with SSL passthrough for UI and CLI
  # Consider setting 'hostname' e.g. https://argocd.apps-crc.testing/ using your Default Ingress Controller Domain
  # Find your domain with: kubectl describe --namespace=openshift-ingress-operator ingresscontroller/default | grep Domain:
  # If 'hostname' is an empty string "" OpenShift will create a hostname for you.
  route:
    # -- Enable an OpenShift Route for the Argo CD server
    enabled: false
    # -- Openshift Route annotations
    annotations: {}
    # -- Hostname of OpenShift Route
    hostname: ""
    # -- Termination type of Openshift Route
    termination_type: passthrough
    # -- Termination policy of Openshift Route
    termination_policy: None

  # Server metrics configuration
  metrics:
    # -- Deploy metrics service
    enabled: false

    # Server metrics service configuration
    service:
      # -- Metrics service annotations
      annotations: {}
      # -- Metrics service labels
      labels: {}
      # -- Metrics service port
      port: 8083
      # -- Metrics service port name
      portName: http-metrics

    # Prometheus ServiceMonitor configuration
    serviceMonitor:
      # -- Enable a ServiceMonitor
      enabled: false
      # -- Labels to be added to the ServiceMonitor
      labels: {}
      # -- Namespace where to deploy ServiceMonitor
      namespace: ""
      # -- Interval at which are Prometheus metrics scraped
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: []
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: []
      # -- ServiceMonitor HTTP scheme used for scraping
      scheme: ""
      # -- ServiceMonitor tlsConfig for scraping the endpoint
      tlsConfig: {}

  # Server service configuration
  service:
    # -- Server service type
    type: ClusterIP
    # -- Server service annotations
    annotations: {}
    # -- Server service labels
    labels: {}
    # Server service ports
    ports:
      # -- Server service http port
      http: 80
      # -- Server service https port
      https: 443
    # Server service node ports if if `server.service.type` is set to "NodePort"
    nodePorts:
      # -- Server service http port for NodePort service type
      http: 30080
      # -- Server service https port for NodePort service type
      https: 30443
    # -- Server service cluster IP
    clusterIP: ""
    # -- LoadBalancer will get created with the IP specified in this field
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
    loadBalancerIP: ""
    # -- Source IP ranges to allow access to service from
    ## Ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    loadBalancerSourceRanges: []
    # -- Server service external IPs
    externalIPs: []
    # -- Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
    ## Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    externalTrafficPolicy: Cluster
    # -- Used to maintain session affinity. Supports `ClientIP` and `None`
    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    sessionAffinity: None

  # Server service account configuration
  serviceAccount:
    # -- Create server service account
    create: true
    # -- Server service account name
    name: ""
    # -- Annotations applied to created service account
    annotations: {}
    # -- Labels applied to created service account
    labels: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true

## Repo Server
repoServer:
  # -- Repo server name
  name: repo-server

  # -- The number of repo server pods to run
  replicas: 1

  autoscaling:
    # -- Enable Horizontal Pod Autoscaler ([HPA]) for the repo server
    enabled: false
    # -- Minimum number of replicas for the repo server [HPA]
    minReplicas: 1
    # -- Maximum number of replicas for the repo server [HPA]
    maxReplicas: 5
    # -- Average CPU utilization percentage for the repo server [HPA]
    targetCPUUtilizationPercentage: 50
    # -- Average memory utilization percentage for the repo server [HPA]
    targetMemoryUtilizationPercentage: 50
    # -- Configures the scaling behavior of the target in both Up and Down directions.
    # This is only available on HPA apiVersion `autoscaling/v2beta2` and newer
    behavior: {}
      # scaleDown:
      #  stabilizationWindowSeconds: 300
      #  policies:
      #   - type: Pods
      #     value: 1
      #     periodSeconds: 180
      # scaleUp:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Pods
      #     value: 2
      #     periodSeconds: 60

  # Pod Disruption Budget configuration
  pdb:
    # -- Deploy a [PodDisruptionBudget] for the repo server
    enabled: false
    # -- Labels to be added to repo server pdb
    labels: {}
    # -- Annotations to be added to repo server pdb
    annotations: {}
    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
    # @default -- `""` (defaults to 0 if not specified)
    minAvailable: ""
    # -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).
    # Takes higher precedence than `repoServer.pdb.minAvailable`
    maxUnavailable: ""

  image:
    # -- Repository to use for the repo server
    # @default -- `""` (defaults to global.image.repository)
    repository: ""
    # -- Tag to use for the repo server
    # @default -- `""` (defaults to global.image.tag)
    tag: ""
    # -- Image pull policy for the repo server
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Secrets with credentials to pull images from a private registry
  imagePullSecrets: []

  # -- Additional command line arguments to pass to repo server
  args: []

  # -- Environment variables to pass to repo server
  env: []

  # -- envFrom to pass to repo server
  # @default -- `[]` (See [values.yaml])
  envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Annotations to be added to repo server pods
  podAnnotations: {}

  # -- Labels to be added to repo server pods
  podLabels: {}

  # Repo server container ports
  containerPorts:
    # -- Server container port
    server: 8081
    # -- Metrics container port
    metrics: 8084

  # -- Repo server container-level security context
  # @default -- See [values.yaml]
  containerSecurityContext:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL

  # Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  readinessProbe:
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3

  livenessProbe:
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3

  # -- Resource limits and requests for the repo server pods
  resources: {}
  #  limits:
  #    cpu: 50m
  #    memory: 128Mi
  #  requests:
  #    cpu: 10m
  #    memory: 64Mi

  # -- Additional volumes to the repo server pod
  volumes: []
  ## Use init containers to configure custom tooling
  ## https://argo-cd.readthedocs.io/en/stable/operator-manual/custom_tools/
  ## When using the volumes & volumeMounts section bellow, please comment out those above.
  #  - name: custom-tools
  #    emptyDir: {}

  # -- Additional volumeMounts to the repo server main container
  volumeMounts: []
  #  - mountPath: /usr/local/bin/helm
  #    name: custom-tools
  #    subPath: helm

  # -- Init containers to add to the repo server pods
  initContainers: []
  #  - name: download-tools
  #    image: alpine:3.8
  #    command: [sh, -c]
  #    args:
  #      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - &&
  #        mv linux-amd64/helm /custom-tools/
  #    volumeMounts:
  #      - mountPath: /custom-tools
  #        name: custom-tools

  # -- Additional containers to be added to the repo server pod
  extraContainers: []

  # -- Priority class for the repo server
  priorityClassName: ""

  # -- [Node selector]
  nodeSelector: {}

  # -- [Tolerations] for use with node taints
  tolerations: []

  # -- Assign custom [affinity] rules to the deployment
  # @default -- `{}` (defaults to `global.affinity` presets)
  affinity: {}

  # -- Assign custom [TopologySpreadConstraints] rules to the repo server
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

  # Repo server custom RBAC configuration
  ## Use this to grant additional permissions
  clusterAdminRbac:
    # -- Enable custom RBAC rules when `rbac.clusterAdmin` is enabled
    enabled: false
    # -- List of custom ClusterRole rules for repo-server
    rules: []

  # Repo server metrics service configuration
  metrics:
    # -- Deploy metrics service
    enabled: false

    # Repo server metrics service configuration
    service:
      # -- Metrics service annotations
      annotations: {}
      # -- Metrics service labels
      labels: {}
      # -- Metrics service port
      port: 8084
      # -- Metrics service port name
      portName: http-metrics

    # Prometheus ServiceMonitor configuration
    serviceMonitor:
      # -- Enable a ServiceMonitor
      enabled: false
      # -- Labels to be added to the ServiceMonitor
      labels: {}
      # -- Namespace where to deploy ServiceMonitor
      namespace: ""
      # -- Interval at which are Prometheus metrics scraped
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: []
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: []
      # -- ServiceMonitor HTTP scheme used for scraping
      scheme: ""
      # -- ServiceMonitor tlsConfig for scraping the endpoint
      tlsConfig: {}

  # Repo server service configuration
  service:
    # -- Repo server service annotations
    annotations: {}
    # -- Repo server service labels
    labels: {}
    # Repo server service ports
    ports:
      # -- Repo server service port
      server: 8081

  # Repo server service account
  ## If create is set to true, make sure to uncomment the name and update the rbac section below
  serviceAccount:
    # -- Create repo server service account
    create: true
    # -- Repo server service account name
    name: ""
    # -- Annotations applied to created service account
    annotations: {}
    # -- Labels applied to created service account
    labels: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true

## ApplicationSet controller
applicationSet:
  # -- Enable application set controller
  enabled: true

  # -- Application set controller name string
  name: applicationset-controller

  # -- The number of application set controller pods to run.
  replicas: 1

  # Pod Disruption Budget configuration
  pdb:
    # -- Deploy a [PodDisruptionBudget] for the application set controller
    enabled: false
    # -- Labels to be added to application set controller pdb
    labels: {}
    # -- Annotations to be added to application set controller pdb
    annotations: {}
    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
    # @default -- `""` (defaults to 0 if not specified)
    minAvailable: ""
    # -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).
    # Takes higher precedence than `applicationSet.pdb.minAvailable`
    maxUnavailable: ""

  image:
    # -- Repository to use for the application set controller
    # @default -- `""` (defaults to global.image.repository)
    repository: ""
    # -- Tag to use for the application set controller
    # @default -- `""` (defaults to global.image.tag)
    tag: ""
    # -- Image pull policy for the application set controller
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Secrets with credentials to pull images from a private registry
  imagePullSecrets: []

  # -- Prevent application set to modify any generated resources
  dryRun: false

  # -- Application set policy for managing generated resources. One of: `sync`, `create-only`, `create-update`
  ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/
  policy: sync

  # -- Application set controller log format. Either `text` or `json`
  # @default -- `""` (defaults to global.logging.format)
  logFormat: ""

  # -- Application set controller log level. One of: `debug`, `info`, `warn`, `error`
  # @default -- `""` (defaults to global.logging.level)
  logLevel: ""

  # -- Additional command line arguments to pass to application set controller
  args: []

  # -- Environment variables to pass to application set controller
  env: []

  # -- envFrom to pass to application set controller
  # @default -- `[]` (See [values.yaml])
  envFrom: []
    # - configMapRef:
    #     name: config-map-name
    # - secretRef:
    #     name: secret-name

  # -- Annotations to be added to application set controller pods
  podAnnotations: {}

  # -- Labels to be added to application set controller pods
  podLabels: {}

  # Application set controller container ports
  containerPorts:
    # -- Metrics container port
    metrics: 8080
    # -- Probe container port
    probe: 8081
    # -- Webhook container port
    webhook: 7000

  # -- Application set controller container-level security context
  # @default -- See [values.yaml]
  containerSecurityContext:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL

  # Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  readinessProbe:
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3

  livenessProbe:
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3

  # -- Resource limits and requests for the application set controller pods
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- Additional volumes to the application set controller pod
  volumes: []

  # -- Additional volumeMounts to the application set main container
  volumeMounts: []

  # -- Additional sidecar containers to be added into the application set controller pod
  extraContainers: []

  # -- Priority class for the application set controller pods
  priorityClassName: ""

  # -- [Node selector]
  nodeSelector: {}

  # -- [Tolerations] for use with node taints
  tolerations: []

  # -- Assign custom [affinity] rules to the deployment
  # @default -- `{}` (defaults to `global.affinity` presets)
  affinity: {}

  # -- Assign custom [TopologySpreadConstraints] rules to the application set controller
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

  # Ingress for the Git Generator webhook
  ## Ref: https://argocd-applicationset.readthedocs.io/en/master/Generators-Git/#webhook-configuration)
  ingress:
    # -- Enable an webhook ingress
    enabled: false
    # -- Additional ingress annotations
    annotations: {}
    # -- Additional ingress labels
    labels: {}

    # -- When ingress is enabled, a host pointing to this will be created
    # @default -- `""` (defaults to `global.domain`)
    hostname: ""

    # -- Defines which ingress controller will implement the resource
    ingressClassName: ""

    # -- The path to ApplicationSet webhook
    path: /api/webhook

    # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    pathType: Prefix

    # TLS options
    tls:
      # -- Enable TLS for hostname defined in `server.ingress.hostname`
      enabled: true
      # -- The name of secret to use for TLS certificate
      ## NOTE: Set to argocd-tls-secret if using `certificate` or `certificateSecret`
      secretName: argocd-secret

    # -- List of additional hosts
    # @default -- `[]` (See [values.yaml])
    extraHosts: []
      #  - name: argocd.server.local
      #    path: /

    # -- Additional ingress paths for webhook
    # @default -- `[]` (See [values.yaml])
    extraPaths: []
      # - path: /*
      #   backend:
      #     serviceName: ssl-redirect
      #     servicePort: use-annotation
      ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
      # - path: /*
      #   pathType: Prefix
      #   backend:
      #     service:
      #       name: ssl-redirect
      #       port:
      #         name: use-annotation

    # -- Additional TLS configuration for additional hosts
    # @default -- `[]` (See [values.yaml])
    ## NOTE: Secrets must be created manually before
    extraTls: []
      # - secretName: argocd-tls-certificate
      #   hosts:
      #     - argocd.example.com

  # Application set metrics configuration
  metrics:
    # -- Deploy metrics service
    enabled: false

    # Application set metrics service configuration
    service:
      # -- Metrics service annotations
      annotations: {}
      # -- Metrics service labels
      labels: {}
      # -- Metrics service port
      port: 8085
      # -- Metrics service port name
      portName: http-metrics

    # Prometheus ServiceMonitor configuration
    serviceMonitor:
      # -- Enable a ServiceMonitor
      enabled: false
      # -- Labels to be added to the ServiceMonitor
      labels: {}
      # -- Namespace where to deploy ServiceMonitor
      namespace: ""
      # -- Interval at which are Prometheus metrics scraped
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: []
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: []
      # -- ServiceMonitor HTTP scheme used for scraping
      scheme: ""
      # -- ServiceMonitor tlsConfig for scraping the endpoint
      tlsConfig: {}

  # Application set service configuration
  service:
    # -- Application set service annotations
    annotations: {}
    # -- Application set service labels
    labels: {}
    # Application set service ports
    ports:
      # -- Git webhook service port
      webhook: 7000

  # Application set service account configuration
  serviceAccount:
    # -- Create a service account for the applicationset controller
    create: true
    # -- Application set service account name
    name: ""
    # -- Annotations to add to the service account
    annotations: {}
    # -- Labels applied to created service account
    labels: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true

## Notifications controller
notifications:
  # -- Enable Notifications controller
  enabled: true

  # -- Notifications controller name string
  name: notifications-controller

  # Pod Disruption Budget configuration
  pdb:
    # -- Deploy a [PodDisruptionBudget] for the application set controller
    enabled: false
    # -- Labels to be added to application set controller pdb
    labels: {}
    # -- Annotations to be added to application set controller pdb
    annotations: {}
    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
    # @default -- `""` (defaults to 0 if not specified)
    minAvailable: ""
    # -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).
    # Takes higher precedence than `dex.pdb.minAvailable`
    maxUnavailable: ""

  image:
    # -- Repository to use for the notifications controller
    # @default -- `""` (defaults to global.image.repository)
    repository: ""
    # -- Tag to use for the notifications controller
    # @default -- `""` (defaults to global.image.tag)
    tag: ""
    # -- Image pull policy for the notifications controller
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Secrets with credentials to pull images from a private registry
  imagePullSecrets: []

  # -- Application controller log format. Either `text` or `json`
  # @default -- `""` (defaults to global.logging.format)
  logFormat: ""

  # -- Application controller log level. One of: `debug`, `info`, `warn`, `error`
  # @default -- `""` (defaults to global.logging.level)
  logLevel: ""

  # -- Additional command line arguments to pass to notifications controller
  args: []

  # -- Environment variables to pass to notifications controller
  env: []

  # -- envFrom to pass to notification controller
  # @default -- `[]` (See [values.yaml])
  envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-nam

  # -- Annotations to be applied to the notification controller pods
  podAnnotations: {}

  # -- Labels to be applied to the notification controller pods
  podLabels: {}

  # Notification controller container ports
  containerPorts:
    # -- Metrics container port
    metrics: 9001

  # -- Notification controller container-level security Context
  # @default -- See [values.yaml]
  containerSecurityContext:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL

  # Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  readinessProbe:
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3

  livenessProbe:
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3

  # -- Resource limits and requests for the notification controller pods
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- Additional volumes to the notifications controller main container
  volumes: []

  # -- Additional volume mounts to the notifications controller pod
  volumeMounts: []

  # -- Priority class for the notification controller pods
  priorityClassName: ""

  # -- [Node selector]
  nodeSelector: {}

  # -- [Tolerations] for use with node taints
  tolerations: []

  # -- Assign custom [affinity] rules to the deployment
  # @default -- `{}` (defaults to `global.affinity` presets)
  affinity: {}

  # The optional bot component simplifies managing subscriptions
  ## Ref: https://argocd-notifications.readthedocs.io/en/stable/bots/overview/
  bots:
    # Bot allows to view existing channel subscriptions and subscibe or unsubscribe channels
    # Ref: https://argocd-notifications.readthedocs.io/en/stable/bots/slack-bot/
    slack:
      # -- Enable Slack bot
      ## NOTE: You have to set configs.notifications.secret.notifiers.slack.signingSecret
      enabled: false

      # -- Slack bot name string
      name: argocd-notifications-slack-bot

      image:
        # -- Repository to use for the Slack bot
        # @default -- `""` (defaults to global.image.repository)
        repository: ""
        # -- Tag to use for the Slack bot
        # @default -- `""` (defaults to global.image.tag)
        tag: ""
        # -- Image pull policy for the Slack bot
        # @default -- `""` (defaults to global.image.imagePullPolicy)
        imagePullPolicy: ""

      # -- Secrets with credentials to pull images from a private registry
      imagePullSecrets: []

      # -- Annotations to be applied to the notification controller pods
      podAnnotations: {}

      # -- Labels to be applied to the notification controller pods
      podLabels: {}

      # -- Slack bot container-level security Context
      # @default -- See [values.yaml]
      containerSecurityContext:
        runAsNonRoot: true

      # -- Resource limits and requests for the Slack bot
      resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

      # -- Priority class for the Slack bot
      priorityClassName: ""

      # -- [Node selector]
      nodeSelector: {}

      # -- [Tolerations] for use with node taints
      tolerations: []

      # -- Assign custom [affinity] rules to the deployment
      # @default -- `{}` (defaults to `global.affinity` presets)
      affinity: {}

      service:
        # -- Service type for Slack bot
        type: LoadBalancer
        # -- Service annotations for Slack bot
        annotations: {}
        # -- Service port for Slack bot
        port: 80

      serviceAccount:
        # -- Specifies whether a service account should be created
        create: true
        # -- Slack bot service account name
        name: ""
        # -- Annotations applied to created service account
        annotations: {}
        # -- Labels applied to created service account
        labels: {}
        # -- Automount API credentials for the Service Account
        automountServiceAccountToken: true

  # Notification controller metrics configuration
  metrics:
    # -- Deploy metrics service
    enabled: false

    # Notification controller metrics service configuration
    service:
      # -- Metrics service annotations
      annotations: {}
      # -- Metrics service labels
      labels: {}
      # -- Metrics service port
      port: 9001
      # -- Metrics service port name
      portName: http-metrics

    # Prometheus ServiceMonitor configuration
    serviceMonitor:
      # -- Enable a ServiceMonitor
      enabled: false
      # -- Labels to be added to the ServiceMonitor
      labels: {}
      # -- Namespace where to deploy ServiceMonitor
      namespace: ""
      # -- Interval at which are Prometheus metrics scraped
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: []
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: []
      # -- ServiceMonitor HTTP scheme used for scraping
      scheme: ""
      # -- ServiceMonitor tlsConfig for scraping the endpoint
      tlsConfig: {}

  # Notification controller service account configuration
  serviceAccount:
    # -- Create a service account for the notification controller
    create: true
    # -- Notification controller service account name
    name: ""
    # -- Annotations applied to created service account
    annotations: {}
    # -- Labels applied to created service account
    labels: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true

## Dex
dex:
  # -- Enable dex
  enabled: true

  # -- Dex name
  name: dex-server

  # Pod Disruption Budget configuration
  pdb:
    # -- Deploy a [PodDisruptionBudget] for the application set controller
    enabled: false
    # -- Labels to be added to application set controller pdb
    labels: {}
    # -- Annotations to be added to application set controller pdb
    annotations: {}
    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
    # @default -- `""` (defaults to 0 if not specified)
    minAvailable: ""
    # -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).
    # Takes higher precedence than `dex.pdb.minAvailable`
    maxUnavailable: ""

  image:
    # -- Dex image repository
    repository: ghcr.io/dexidp/dex
    # -- Dex image tag
    tag: v2.35.1-distroless
    # -- Dex imagePullPolicy
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # Argo CD init image that crates Dex config
  initImage:
    # -- Argo CD init image repository
    # @default -- `""` (defaults to global.image.repository)
    repository: ""
    # -- Argo CD init image tag
    # @default -- `""` (defaults to global.image.tag)
    tag: ""
    # -- Argo CD init image imagePullPolicy
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # -- Secrets with credentials to pull images from a private registry
  imagePullSecrets: []

  # -- Additional command line arguments to pass to the Dex server
  args: []

  # -- Environment variables to pass to the Dex server
  env: []

  # -- envFrom to pass to the Dex server
  # @default -- `[]` (See [values.yaml])
  envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Annotations to be added to the Dex server pods
  podAnnotations: {}

  # -- Labels to be added to the Dex server pods
  podLabels: {}

  # -- Dex container-level security context
  # @default -- See [values.yaml]
  containerSecurityContext:
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL

  # Probes for Dex server
  ## Supported from Dex >= 2.28.0
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  readinessProbe:
    # -- Enable Kubernetes readiness probe for Dex >= 2.28.0
    enabled: false
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3

  livenessProbe:
    # -- Enable Kubernetes liveness probe for Dex >= 2.28.0
    enabled: false
    # -- Number of seconds after the container has started before [probe] is initiated
    initialDelaySeconds: 10
    # -- How often (in seconds) to perform the [probe]
    periodSeconds: 10
    # -- Number of seconds after which the [probe] times out
    timeoutSeconds: 1
    # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    successThreshold: 1
    # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    failureThreshold: 3


  # -- Resource limits and requests for dex
  resources: {}
  #  limits:
  #    cpu: 50m
  #    memory: 64Mi
  #  requests:
  #    cpu: 10m
  #    memory: 32Mi

  # -- Additional volumes to the dex pod
  volumes: []

  # -- Additional volumeMounts to the dex main container
  volumeMounts: []

  # -- Init containers to add to the dex pod
  initContainers: []
  #  - name: download-tools
  #    image: alpine:3.8
  #    command: [sh, -c]
  #    args:
  #      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - &&
  #        mv linux-amd64/helm /custom-tools/
  #    volumeMounts:
  #      - mountPath: /custom-tools
  #        name: custom-tools
  #  volumeMounts:
  #  - mountPath: /usr/local/bin/helm
  #    name: custom-tools
  #    subPath: helm

  # -- Additional containers to be added to the dex pod
  extraContainers: []

  # -- Priority class for dex
  priorityClassName: ""

  # -- [Node selector]
  nodeSelector: {}

  # -- [Tolerations] for use with node taints
  tolerations: []

  # -- Assign custom [affinity] rules to the deployment
  # @default -- `{}` (defaults to `global.affinity` presets)
  affinity: {}

  # -- Assign custom [TopologySpreadConstraints] rules to dex
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

  # Dex metrics configuration
  metrics:
    # -- Deploy metrics service
    enabled: false

    # Dex metrics service configuration
    service:
      # -- Metrics service annotations
      annotations: {}
      # -- Metrics service labels
      labels: {}
      # -- Metrics service port
      port: 5558
      # -- Metrics service port name
      portName: http-metrics

    # Prometheus ServiceMonitor configuration
    serviceMonitor:
      # -- Enable a ServiceMonitor
      enabled: false
      # -- Labels to be added to the ServiceMonitor
      labels: {}
      # -- Namespace where to deploy ServiceMonitor
      namespace: ""
      # -- Interval at which are Prometheus metrics scraped
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: []
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: []
      # -- ServiceMonitor HTTP scheme used for scraping
      scheme: ""
      # -- ServiceMonitor tlsConfig for scraping the endpoint
      tlsConfig: {}

  # Dex service configuration
  service:
    # -- Dex service annotations
    annotations: {}
    # Additional dex service labels
    labels: {}
    # Dex service ports
    ports:
      # -- Service port for HTTP access
      http: 5556
      # -- Service port for gRPC access
      grpc: 5557

  # Dex service account configuration
  serviceAccount:
    # -- Create dex service account
    create: true
    # -- Dex service account name
    name: ""
    # -- Annotations applied to created service account
    annotations: {}
    # -- Labels applied to created service account
    labels: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: true

## Redis
redis:
  # -- Enable redis
  enabled: true

  # -- Redis name
  name: redis

  # Pod Disruption Budget configuration
  pdb:
    # -- Deploy a [PodDisruptionBudget] for the Redis
    enabled: true
    # -- Labels to be added to redis pdb
    labels: {}
    # -- Annotations to be added to redis pdb
    annotations: {}
    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
    # @default -- `""` (defaults to 0 if not specified)
    minAvailable: ""
    # -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).
    # Takes higher precedence than `dex.pdb.minAvailable`
    maxUnavailable: ""

  # Redis image
  image:
    # -- Redis repository
    repository: public.ecr.aws/docker/library/redis
    # -- Redis tag
    tag: 7.0.4-alpine
    # -- Image pull policy for the Redis
    # @default -- `""` (defaults to global.image.imagePullPolicy)
    imagePullPolicy: ""

  # Prometheus redis-exporter sidecar
  exporter:
    # -- Enable Prometheus redis-exporter sidecar
    enabled: true
    # Prometheus redis-exporter image
    image:
      # -- redis-exporter image repository
      repository: public.ecr.aws/bitnami/redis-exporter
      # -- redis-exporter image tag
      tag: 1.26.0-debian-10-r2
      # -- Image pull policy for the Redis exporter
      # @default -- `""` (defaults to global.image.imagePullPolicy)
      imagePullPolicy: ""

    # -- Container security context for redis-exporter sidecar
    containerSecurityContext: {}

    # -- Resource limits and requests for redis-exporter sidecar
    resources: {}
      # limits:
      #   cpu: 50m
      #   memory: 64Mi
      # requests:
      #   cpu: 10m
      #   memory: 32Mi

  # -- Secrets with credentials to pull images from a private registry
  imagePullSecrets: []

  # -- Additional command line arguments to pass to redis-server
  args: []
  # - --bind
  # - "0.0.0.0"

  # -- Environment variables to pass to the Redis server
  env: []

  # -- envFrom to pass to the Redis server
  # @default -- `[]` (See [values.yaml])
  envFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

  # -- Annotations to be added to the Redis server pods
  podAnnotations: {}

  # -- Labels to be added to the Redis server pods
  podLabels: {}

  # -- Redis pod-level security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 999

  # Redis container ports
  containerPorts:
    # -- Redis container port
    redis: 6379
    # -- Metrics container port
    metrics: 9121

  # -- Redis container-level security context
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL

  # -- Resource limits and requests for redis
  resources: {}
  #  limits:
  #    cpu: 200m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 64Mi

  # -- Additional volumes to the redis pod
  volumes: []

  # -- Additional volumeMounts to the redis container
  volumeMounts: []

  # -- Init containers to add to the redis pod
  initContainers: []
  #  - name: download-tools
  #    image: alpine:3.8
  #    command: [sh, -c]
  #    args:
  #      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - &&
  #        mv linux-amd64/helm /custom-tools/
  #    volumeMounts:
  #      - mountPath: /custom-tools
  #        name: custom-tools
  #  volumeMounts:
  #  - mountPath: /usr/local/bin/helm
  #    name: custom-tools
  #    subPath: helm

  # -- Additional containers to be added to the redis pod
  extraContainers: []

  # -- Priority class for redis
  priorityClassName: ""

  # -- [Node selector]
  nodeSelector: {}

  # -- [Tolerations] for use with node taints
  tolerations: []

  # -- Assign custom [affinity] rules to the deployment
  # @default -- `{}` (defaults to `global.affinity` presets)
  affinity: {}

  # -- Assign custom [TopologySpreadConstraints] rules to redis
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

  # Redis metrics configuration
  ## NOTE: Metrics are available only when `exporter.enabled` is set
  metrics:
    # -- Deploy metrics service
    enabled: false

    # Redis metrics service configuration
    service:
      # -- Metrics service type
      type: ClusterIP
      # -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
      clusterIP: None
      # -- Metrics service annotations
      annotations: {}
      # -- Metrics service labels
      labels: {}
      # -- Metrics service port
      port: 9121
      # -- Metrics service port name
      portName: http-metrics

    # Prometheus ServiceMonitor configuration
    serviceMonitor:
      # -- Enable a ServiceMonitor
      enabled: false
      # -- Labels to be added to the ServiceMonitor
      labels: {}
      # -- Namespace where to deploy ServiceMonitor
      namespace: ""
      # -- Interval at which are Prometheus metrics scraped
      interval: 30s
      # -- Prometheus [RelabelConfigs] to apply to samples before scraping
      relabelings: []
      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
      metricRelabelings: []
      # -- ServiceMonitor HTTP scheme used for scraping
      scheme: ""
      # -- ServiceMonitor tlsConfig for scraping the endpoint
      tlsConfig: {}

  # Redis service configuration
  service:
    # -- Redis service annotations
    annotations: {}
    # -- Additional redis service labels
    labels: {}
    # Redis service ports
    ports:
      # -- Redis service port
      redis: 6379

  # Redis service account configuration
  serviceAccount:
    # -- Create a service account for the redis pod
    create: true
    # -- Redis service account name
    name: ""
    # -- Annotations applied to created service account
    annotations: {}
    # -- Labels applied to created service account
    labels: {}
    # -- Automount API credentials for the Service Account
    automountServiceAccountToken: false

# This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)
# the custom redis deployment is omitted
# Check the redis-ha chart for more properties
redis-ha:
  # -- Enables the Redis HA subchart and disables the custom Redis single node deployment
  enabled: false
  # Redis image
  image:
    # -- Redis tag
    tag: 7.0.4-alpine
  # Redis Prometheus metrics exporter
  exporter:
    # -- If `true`, the prometheus exporter sidecar is enabled
    enabled: true
  persistentVolume:
    # -- Configures persistency on Redis nodes
    enabled: false
  redis:
    # -- Redis convention for naming the cluster group: must match `^[\\w-\\.]+$` and can be templated
    masterGroupName: argocd
    # -- Any valid redis config options in this section will be applied to each server (see `redis-ha` chart)
    # @default -- See [values.yaml]
    config:
      # -- Will save the DB if both the given number of seconds and the given number of write operations against the DB occurred. `""`  is disabled
      # @default -- `'""'`
      save: '""'
  haproxy:
    # -- Enabled HAProxy LoadBalancing/Proxy
    enabled: true
    metrics:
      # -- HAProxy enable prometheus metric scraping
      enabled: true

  # -- Redis HA TopologySpreadConstraints
  ## https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  topologySpreadConstraints:
    # -- Enable Redis HA topology spread constraints
    enabled: false
    # -- Max skew of pods tolerated
    # @default -- `""` (defaults to `1`)
    maxSkew: ""
    # -- Topology key for spread
    # @default -- `""` (defaults to `topology.kubernetes.io/zone`)
    topologyKey: ""
    # -- Enforcement policy, hard or soft
    # @default -- `""` (defaults to `ScheduleAnyway`)
    whenUnsatisfiable: ""
