# -- Install and upgrade CRDs
installCRDs: true
# -- Keep CRD's on helm uninstall
keepCRDs: true

# -- `false` runs controller in namespaced mode (does not require cluster RBAC)
clusterInstall: true

# -- String to partially override "argo-rollouts.fullname" template
nameOverride:

# -- String to fully override "argo-rollouts.fullname" template
fullnameOverride:

## Override APIVersions
## If you want to template helm charts but cannot access k8s API server
## you can set api versions here
apiVersionOverrides:
  # -- String to override apiVersion of ingresses rendered by this helm chart
  ingress: "" # networking.k8s.io/v1beta1

# -- Override the Kubernetes version, which is used to evaluate certain manifests
kubeVersionOverride: ""

controller:
  # -- Value of label `app.kubernetes.io/component`
  component: rollouts-controller
  # -- [Node selector]
  nodeSelector: {}
  # -- [Tolerations] for use with node taints
  tolerations: []
  # -- Assign custom [affinity] rules to the deployment
  affinity: {}
  # -- [priorityClassName] for the controller
  priorityClassName: ""
  # -- The number of controller pods to run
  replicas: 2
  image:
    # -- Registry to use
    registry: quay.io
    # -- Repository to use
    repository: argoproj/argo-rollouts
    # -- Overrides the image tag (default is the chart appVersion)
    tag: ""
    # -- Image pull policy
    pullPolicy: IfNotPresent

  # -- Additional command line arguments to pass to rollouts-controller.  A list of flags.
  extraArgs: []

  # -- Literal yaml for extra containers to be added to controller deployment.
  ## Additional containers to add to the rollouts controller deployment
  ## This will be rendered as the literal yaml
  extraContainers: []

  # -- Resource limits and requests for the controller pods.
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 50m
  #    memory: 64Mi

  metrics:
    # -- Deploy metrics service
    enabled: false
    serviceMonitor:
      # -- Enable a prometheus ServiceMonitor
      enabled: false
      # -- Labels to be added to the ServiceMonitor
      additionalLabels: {}
      # -- Annotations to be added to the ServiceMonitor
      additionalAnnotations: {}

  # -- Configure liveness [probe] for the controller
  # @default -- See [values.yaml]
  livenessProbe:
    httpGet:
      path: /healthz
      port: healthz
    initialDelaySeconds: 30
    periodSeconds: 20
    failureThreshold: 3
    successThreshold: 1
    timeoutSeconds: 10

  # -- Configure readiness [probe] for the controller
  # @default -- See [values.yaml]
  readinessProbe:
    httpGet:
      path: /metrics
      port: metrics
    initialDelaySeconds: 15
    periodSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    timeoutSeconds: 4

  ## Configure Pod Disruption Budget for the controller
  pdb:
    # -- Labels to be added to controller [Pod Disruption Budget]
    labels: {}
    # -- Annotations to be added to controller [Pod Disruption Budget]
    annotations: {}
    # -- Deploy a [Pod Disruption Budget] for the controller
    enabled: false
    # -- Minimum number / percentage of pods that should remain scheduled
    minAvailable: # 1
    # -- Maximum number / percentage of pods that may be made unavailable
    maxUnavailable: # 0

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Annotations to be added to all CRDs
crdAnnotations: {}

# -- Annotations to be added to the Rollout pods
podAnnotations: {}

# -- Security Context to set on pod level
podSecurityContext:
  runAsNonRoot: true

# -- Security Context to set on container level
containerSecurityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# -- Annotations to be added to the Rollout service
serviceAnnotations: {}

# -- Labels to be added to the Rollout pods
podLabels: {}

# -- Secrets with credentials to pull images from a private registry. Registry secret names as an array.
imagePullSecrets: []
# - name: argo-pull-secret

dashboard:
  # -- Deploy dashboard server
  enabled: false
  # -- Set cluster role to readonly
  readonly: false
  # -- Value of label `app.kubernetes.io/component`
  component: rollouts-dashboard
  # -- [Node selector]
  nodeSelector: {}
  # -- [Tolerations] for use with node taints
  tolerations: []
  # -- Assign custom [affinity] rules to the deployment
  affinity: {}
  # -- [priorityClassName] for the dashboard server
  priorityClassName: ""
  # -- The number of dashboard pods to run
  replicas: 1
  image:
    # -- Registry to use
    registry: quay.io
    # --  Repository to use
    repository: argoproj/kubectl-argo-rollouts
    # -- Overrides the image tag (default is the chart appVersion)
    tag: ""
    # -- Image pull policy
    pullPolicy: IfNotPresent
  # -- Additional command line arguments to pass to rollouts-dashboard. A list of flags.
  extraArgs: []
  # -- Resource limits and requests for the dashboard pods.
  resources: {}
  # -- Security Context to set on pod level
  podSecurityContext:
    runAsNonRoot: true
  # -- Security Context to set on container level
  containerSecurityContext: {}
  service:
    # -- Sets the type of the Service
    type: ClusterIP
    # -- LoadBalancer will get created with the IP specified in this field
    loadBalancerIP: ""
    # -- Source IP ranges to allow access to service from
    loadBalancerSourceRanges: []
    # -- Dashboard service external IPs
    externalIPs: []
    # -- Service annotations
    annotations: {}
    # -- Service labels
    labels: {}
    # -- Service port name
    portName: dashboard
    # -- Service port
    port: 3100
    # -- Service target port
    targetPort: 3100
    # -- (int) Service nodePort
    nodePort:
  serviceAccount:
    # -- Specifies whether a dashboard service account should be created
    create: true
    # -- Annotations to add to the dashboard service account
    annotations: {}
    # -- The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  ## Configure Pod Disruption Budget for the dashboard
  pdb:
    # -- Labels to be added to dashboard [Pod Disruption Budget]
    labels: {}
    # -- Annotations to be added to dashboard [Pod Disruption Budget]
    annotations: {}
    # -- Deploy a [Pod Disruption Budget] for the dashboard
    enabled: false
    # -- Minimum number / percentage of pods that should remain scheduled
    minAvailable: # 1
    # -- Maximum number / percentage of pods that may be made unavailable
    maxUnavailable: # 0

  ## Ingress configuration.
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ##
  ingress:
    # -- Enable dashboard ingress support
    enabled: false
    # -- Dashboard ingress annotations
    annotations: {}
    # -- Dashboard ingress labels
    labels: {}
    # -- Dashboard ingress class name
    ingressClassName: ""

    # -- Dashboard ingress hosts
    ## Argo Rollouts Dashboard Ingress.
    ## Hostnames must be provided if Ingress is enabled.
    ## Secrets must be manually created in the namespace
    hosts: []
      # - argorollouts.example.com

    # -- Dashboard ingress paths
    paths:
      - /
    # -- Dashboard ingress path type
    pathType: Prefix
    # -- Dashboard ingress extra paths
    extraPaths: []
      # - path: /*
      #   backend:
      #     serviceName: ssl-redirect
      #     servicePort: use-annotation
      ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
      # - path: /*
      #   pathType: Prefix
      #   backend:
      #     service
      #       name: ssl-redirect
      #       port:
      #         name: use-annotation

    # -- Dashboard ingress tls
    tls: []
      # - secretName: argorollouts-example-tls
      #   hosts:
      #     - argorollouts.example.com

notifications:
  secret:
    # -- Whether to create notifications secret
    create: false
    # -- Generic key:value pairs to be inserted into the notifications secret
    items: {}
      # slack-token:

  # -- Configures notification services
  notifiers: {}
    # service.slack: |
    #   token: $slack-token

  # -- Notification templates
  templates: {}
    # template.my-purple-template: |
    #   message: |
    #     Rollout {{.rollout.metadata.name}} has purple image
    #   slack:
    #       attachments: |
    #           [{
    #             "title": "{{ .rollout.metadata.name}}",
    #             "color": "#800080"
    #           }]

  # -- The trigger defines the condition when the notification should be sent
  triggers: {}
    # trigger.on-purple: |
    #   - send: [my-purple-template]
    #     when: rollout.spec.template.spec.containers[0].image == 'argoproj/rollouts-demo:purple'
