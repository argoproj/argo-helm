# -- Replica count for the deployment. It is not advised to run more than one replica.
replicaCount: 1
image:
  # -- Default image repository
  repository: quay.io/argoprojlabs/argocd-image-updater
  # -- Default image pull policy
  pullPolicy: Always
  # -- Overrides the image tag whose default is the chart appVersion
  tag: ""

# -- The deployment strategy to use to replace existing pods with new ones
updateStrategy:
  type: Recreate
# -- ImagePullSecrets for the image updater deployment
imagePullSecrets: []
# -- Global name (argocd-image-updater.name in _helpers.tpl) override
nameOverride: ""
# -- Global fullname (argocd-image-updater.fullname in _helpers.tpl) override
fullnameOverride: ""
# -- Global namespace (argocd-image-updater.namespace in _helpers.tpl) override
namespaceOverride: ""

# -- Create cluster roles for cluster-wide installation. Used when you manage applications in the same cluster where Argo CD Image Updater runs. If you want to use this, please set `.Values.rbac.enabled` true as well.
createClusterRoles: true

# -- Extra arguments for argocd-image-updater not defined in `config.argocd`. If a flag contains both key and value, they need to be split to a new entry.
extraArgs: []
  # - --disable-kubernetes
  # - --dry-run
  # - --health-port
  # - 8080
  # - --interval
  # - 2m
  # - --kubeconfig
  # - ~/.kube/config
  # - --match-application-name
  # - staging-*
  # - --max-concurrency
  # - 5
  # - --once
  # - --registries-conf-path
  # - /app/config/registries.conf

# -- Extra environment variables for argocd-image-updater. These variables are also available to the authentication scripts mounted under /scripts, provided 'authScripts.enabled' is set to 'true'.
extraEnv: []
  # - name: AWS_REGION
  #   value: "us-west-1"
  # - name: ACR1_NAME
  #   value: "acr1.azurecr.io"
  # - name: ACR1_CLIENT_ID
  #   value: "00000000-0000-0000-0000-000000000000"

# -- Extra envFrom to pass to argocd-image-updater
extraEnvFrom: []
  # - configMapRef:
  #     name: config-map-name
  # - secretRef:
  #     name: secret-name

# -- Extra K8s manifests to deploy for argocd-image-updater. Note: Supports use of custom Helm templates.
extraObjects: []
  # - apiVersion: secrets-store.csi.x-k8s.io/v1
  #   kind: SecretProviderClass
  #   metadata:
  #     name: argocd-image-updater-secrets-store
  #   spec:
  #     provider: aws
  #     parameters:
  #       objects: |
  #         - objectName: "argocd-image-updater"
  #           objectType: "secretsmanager"
  #           jmesPath:
  #               - path: "client_id"
  #                 objectAlias: "client_id"
  #               - path: "client_secret"
  #                 objectAlias: "client_secret"
  #     secretObjects:
  #     - data:
  #       - key: client_id
  #         objectName: client_id
  #       - key: client_secret
  #         objectName: client_secret
  #       secretName: argocd-image-updater-secrets-store
  #       type: Opaque
  #       labels:
  #         app.kubernetes.io/part-of: argocd

# -- Init containers to add to the image updater pod
initContainers: []
  #  - name: download-tools
  #    image: alpine:3.8
  #    command: [sh, -c]
  #    args:
  #      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - &&
  #        mv linux-amd64/helm /custom-tools/
  #    volumeMounts:
  #      - mountPath: /custom-tools
  #        name: custom-tools

# -- Additional volumeMounts to the image updater main container
volumeMounts: []

# -- Additional volumes to the image updater pod
volumes: []
  ## Use init containers to configure custom tooling
  ## https://argo-cd.readthedocs.io/en/stable/operator-manual/custom_tools/
  ## When using the volumes & volumeMounts section bellow, please comment out those above.
  #  - name: custom-tools
  #    emptyDir: {}

config:
  # -- Name of the ConfigMap
  name: argocd-image-updater-config
  # -- API kind that is used to manage Argo CD applications (`kubernetes` or `argocd`)
  applicationsAPIKind: ""

  # Described in detail here https://argocd-image-updater.readthedocs.io/en/stable/install/reference/#flags
  # Note: this is only relevant if config.applicationsAPIKind == 'argocd'
  argocd:
    # -- Use the gRPC-web protocol to connect to the Argo CD API
    grpcWeb: true
    # -- Connect to the Argo CD API server at server address
    serverAddress: ""
    # -- If specified, the certificate of the Argo CD API server is not verified.
    insecure: false
    # -- If specified, use an unencrypted HTTP connection to the Argo CD API instead of TLS.
    plaintext: false
    # -- If specified, the secret with Argo CD API key will be created.
    token: ""
    # -- Name of the Secret containing the token
    tokenSecretName: "argocd-image-updater-secret"

  # -- Disable kubernetes events
  disableKubeEvents: false

  # -- Username to use for Git commits
  gitCommitUser: ""

  # -- E-Mail address to use for Git commits
  gitCommitMail: ""

  # -- Changing the Git commit message
  gitCommitTemplate: ""

  # -- Path to public SSH key mounted in container, or GPG key ID used to sign commits
  gitCommitSigningKey: ""

  # -- Enables sign off on commits
  gitCommitSignOff: false

  # -- Method used to sign Git commits. `openpgp` or `ssh`
  gitCommitSigningMethod: ""

  # -- Argo CD Image Update log level
  logLevel: "info"

  # -- Argo CD Image Updater registries list configuration. More information [here](https://argocd-image-updater.readthedocs.io/en/stable/configuration/registries/).
  registries: []
    # - name:
