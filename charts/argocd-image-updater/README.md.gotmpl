{{ template "chart.header" . }}

{{ template "chart.description" . }}

To regenerate this document, from the root of this chart directory run:
```shell
docker run --rm --volume "$(pwd):/helm-docs" -u $(id -u) jnorwood/helm-docs:latest
```

## Installation

```console
helm repo add argo https://argoproj.github.io/argo-helm
helm install argocd-image-updater argo/argocd-image-updater
```

You will also need to run through the [secret setup documentation] so Argo CD Image Updater can talk to the Argo CD API (until its automated in this chart).

## Prerequisites

* Helm v3.0.0+

## Configuration options

In order for your deployment of Argo CD Image Updater to be successful, you will need to make sure you set the correct configuration options described in detail on the [argocd-image-updater flags page].

All of the `argocd-` prefixed flags, which tell `argocd-image-updater` how your Argo CD instance is setup, are set in the `config.argocd` values block. For instance:

```yaml
config:
  argocd:
    grpcWeb: false
    serverAddress: "http://argocd.argo"
    insecure: true
    plaintext: true
```

Any additional arguments mentioned on the [argocd-image-updater flags page] can be configured using the `extraArgs` value, like so.

### Argo CD API key

If you are unable to install Argo CD Image Updater into the same Kubernetes cluster you might configure it to use API of your Argo CD installation.
Please also read [Configuration of Container Registries].

```yaml
config:
  argocd:
    token: <your_secret_here>
```

If you specify a token value the secret will be created.

### Registries

Argo CD Image Updater natively supports the following registries (as mentioned in [Configuration of Container Registries]):

- Docker Hub
- Google Container Registry
- RedHat Quay
- GitHub Container Registry
- GitHub Docker Packages

If you need support for ECR, you can reference this issue, [Support ECR authentication], for configuration. You can use the `authScripts` values to configure the scripts that are needed to authenticate with ECR.

The `config.registries` value can be used exactly as it looks in the documentation as it gets dumped directly into a configmap in this chart.

### Commit Signing

Commit signing requires the repository be accessed using HTTPS or SSH with a user account.
Repositories accessed using a GitHub App can not be verified when using the git command line at this time.

Each Git commit associated with an author's name and email address can be signed via a public SSH key or GPG key.
Commit signing requires a bot account with a GPG or SSH key and the username and email address configured to match the bot account.


Commit Sign Off can be enabled by setting `git.commit-sign-off: "true"`

**SSH:**

Both private and public keys must be mounted and accessible on the `argocd-image-updater` pod.

Set `git.commit-signing-key` `argocd-image-updater-config` ConfigMap to the path of your public key:

```yaml
data:
  git.commit-sign-off: "true"
  git.commit-signing-key: /app/.ssh/id_rsa.pub
```

The matching private key must be available in the same location.

Create a new SSH secret or add the public key to your existing SSH secret:
```bash
kubectl -n argocd-image-updater create secret generic ssh-git-creds \
  --from-file=sshPrivateKey=~/.ssh/id_rsa \
  --from-file=sshPublicKey=~/.ssh/id_rsa.pub
```

**GPG:**

The GPG private key must be installed and available in the `argocd-image-updater` pod.
Set `git.commit-signing-key` in the `argocd-image-updater-config` ConfigMap to the GPG key ID you want to use:

```yaml
data:
  git.commit-sign-off: "true"
  git.commit-signing-key: 3AA5C34371567BD2
```

Volume configuration must be added to mount your SSH signing keys:

```yaml
volumeMounts:
- name: ssh-signing-key
  mountPath: /app/.ssh/id_rsa
  readOnly: true
  subPath: sshPrivateKey
- name: ssh-signing-key
  mountPath: /app/.ssh/id_rsa.pub
  readOnly: true
  subPath: sshPublicKey

volumes:
- name: ssh-signing-key
  secret:
    secretName: ssh-git-creds
  optional: true
```

{{ template "chart.valuesSection" . }}

----------------------------------------------
Autogenerated from chart metadata using [helm-docs](https://github.com/norwoodj/helm-docs)

[MetricRelabelConfigs]: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
[RelabelConfigs]: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
[secret setup documentation]: https://argocd-image-updater.readthedocs.io/en/stable/install/installation/#method-2-connect-using-argo-cd-api-server
[argocd-image-updater flags page]: https://argocd-image-updater.readthedocs.io/en/stable/install/reference/#flags
[Configuration of Container Registries]: https://argocd-image-updater.readthedocs.io/en/stable/configuration/registries/
[Support ECR authentication]: https://github.com/argoproj-labs/argocd-image-updater/issues/112
