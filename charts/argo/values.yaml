images:
  namespace: argoproj
  controller: workflow-controller
  server: argocli
  executor: argoexec
  pullPolicy: Always
  # Secrets with credentials to pull images from a private registry
  pullSecrets: []
  # - name: argo-pull-secret
  tag: v2.12.5

crdVersion: v1alpha1
installCRD: true

init:
  # By default the installation will not set an explicit one, which will mean it uses `default` for the namespace the chart is
  # being deployed to.  In RBAC clusters, that will almost certainly fail.  See the NOTES: section of the readme for more info.
  serviceAccount: ""

createAggregateRoles: true

# Restrict Argo to only deploy into a single namespace by apply Roles and RoleBindings instead of the Cluster equivalents,
# and start argo-cli with the --namespaced flag. Use it in clusters with strict access policy.
singleNamespace: false

workflow:
  namespace: ""  # Specify namespace if workflows run in another namespace than argo. This controls where the service account and RBAC resources will be created.
  serviceAccount:
    create: false  # Specifies whether a service account should be created
    annotations: {}
    name: "argo-workflow"  # Service account which is used to run workflows
  rbac:
    create: false  # adds Role and RoleBinding for the above specified service account to be able to run workflows

controller:
  image:
    # Overrides .images.tag if defined.
    tag: ""
  # parallelism dictates how many workflows can be running at the same time
  parallelism:
  # podAnnotations is an optional map of annotations to be applied to the controller Pods
  podAnnotations: {}
  # Optional labels to add to the controller pods
  podLabels: {}
  # SecurityContext to set on the controller pods
  podSecurityContext: {}
  # podPortName: http
  metricsConfig:
    enabled: false
    path: /metrics
    port: 8080
  persistence: {}
  # connectionPool:
  #   maxIdleConns: 100
  #   maxOpenConns: 0
  # # save the entire workflow into etcd and DB
  # nodeStatusOffLoad: false
  # # enable archiving of old workflows
  # archive: false
  # postgresql:
  #   host: localhost
  #   port: 5432
  #   database: postgres
  #   tableName: argo_workflows
  #   # the database secrets must be in the same namespace of the controller
  #   userNameSecret:
  #     name: argo-postgres-config
  #     key: username
  #   passwordSecret:
  #     name: argo-postgres-config
  #     key: password
  workflowDefaults: {}  # Only valid for 2.7+
  #  spec:
  #    ttlStrategy:
  #      secondsAfterCompletion: 84600
  # workflowWorkers: 32
  # podWorkers: 32
  workflowRestrictions: {}  # Only valid for 2.9+
  #  templateReferencing: Strict|Secure
  telemetryConfig:
    enabled: false
    path: /telemetry
    port: 8081
  serviceMonitor:
    enabled: false
    additionalLabels: {}
  serviceAccount: argo
  # Service account annotations
  serviceAccountAnnotations: {}
  name: workflow-controller
  workflowNamespaces:
    - default
  containerRuntimeExecutor: docker
  instanceID:
    # `instanceID.enabled` configures the controller to filter workflow submissions
    # to only those which have a matching instanceID attribute.
    enabled: false
    # NOTE: If `instanceID.enabled` is set to `true` then either `instanceID.userReleaseName`
    # or `instanceID.explicitID` must be defined.
    # useReleaseName: true
    # explicitID: unique-argo-controller-identifier
  logging:
    level: info
    globallevel: "0"
  serviceType: ClusterIP
  metricsServicePort: 8080
  metricsServicePortName: metrics
  telemetryServicePort: 8081
  telemetryServicePortName: telemetry
  # Annotations to be applied to the controller Service
  serviceAnnotations: {}
  # Optional labels to add to the controller Service
  serviceLabels: {}
  # Source ranges to allow access to service from. Only applies to
  # service type `LoadBalancer`
  loadBalancerSourceRanges: []
  resources: {}
  # The list of environment variable definitions to be added to the controller
  # manages container verbatim.
  extraEnv: []
  # Extra arguments to be added to the controller
  extraArgs: []
  replicas: 1
  pdb:
    enabled: false
    # minAvailable: 1
    # maxUnavailable: 1
  ## Node selectors and tolerations for server scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  nodeSelector:
    kubernetes.io/os: linux
  tolerations: []
  affinity: {}
  # Leverage a PriorityClass to ensure your pods survive resource shortages
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  # PriorityClass: system-cluster-critical
  priorityClassName: ""
  # https://argoproj.github.io/argo/links/
  links: []

# executor controls how the init and wait container should be customized
executor:
  image:
    # Overrides .images.tag if defined.
    tag: ""
  resources: {}
  # Adds environment variables for the executor.
  env: {}
  # sets security context for the executor container
  securityContext: {}

server:
  enabled: true
  # only updates base url of resources on client side,
  # it's expected that a proxy server rewrites the request URL and gets rid of this prefix
  # https://github.com/argoproj/argo/issues/716#issuecomment-433213190
  baseHref: /
  image:
    # Overrides .images.tag if defined.
    tag: ""
  # optional map of annotations to be applied to the ui Pods
  podAnnotations: {}
  # Optional labels to add to the UI pods
  podLabels: {}
  # SecurityContext to set on the server pods
  podSecurityContext: {}
  name: server
  serviceType: ClusterIP
  servicePort: 2746
  # servicePortName: http
  serviceAccount: argo-server
  # Whether to create the service account with the name specified in
  # server.serviceAccount and bind it to the server role.
  createServiceAccount: true
  # Service account annotations
  serviceAccountAnnotations: {}
  # Annotations to be applied to the UI Service
  serviceAnnotations: {}
  # Optional labels to add to the UI Service
  serviceLabels: {}
  # Static IP address to assign to loadBalancer
  # service type `LoadBalancer`
  loadBalancerIP: ""
  # Source ranges to allow access to service from. Only applies to
  # service type `LoadBalancer`
  loadBalancerSourceRanges: []
  resources: {}
  replicas: 1
  pdb:
    enabled: false
    # minAvailable: 1
    # maxUnavailable: 1
  ## Node selectors and tolerations for server scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  nodeSelector:
    kubernetes.io/os: linux
  tolerations: []
  affinity: {}
  # Leverage a PriorityClass to ensure your pods survive resource shortages
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  # PriorityClass: system-cluster-critical
  priorityClassName: ""

  # Run the argo server in "secure" mode. Configure this value instead of
  # "--secure" in extraArgs. See the following documentation for more details
  # on secure mode:
  # https://argoproj.github.io/argo/tls/#encrypted
  secure: false

  # Extra arguments to provide to the Argo server binary.
  extraArgs: []

  ## Additional volumes to the server main container.
  volumeMounts: []
  volumes: []

  ## Ingress configuration.
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ##
  ingress:
    enabled: false

    ## Annotations to be added to the web ingress.
    ##
    # annotations:
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: "true"

    ## Labels to be added to the web ingress.
    ##
    # labels:
    #   use-cloudflare-solver: "true"

    ## Hostnames.
    ## Must be provided if Ingress is enabled.
    ##
    # hosts:
    #   - argo.domain.com

    ## Additional Paths for each host
    # paths:
    #   - serviceName: "ssl-redirect"
    #     servicePort: "use-annotation"

    ## TLS configuration.
    ## Secrets must be manually created in the namespace.
    ##
    # tls:
    #   - secretName: argo-ui-tls
    #     hosts:
    #       - argo.domain.com
  clusterWorkflowTemplates:
    # Give the server permissions to edit ClusterWorkflowTemplates.
    enableEditing: true
  sso:
    ## SSO configuration when SSO is specified as a server auth mode.
    ## All the values are required. SSO is activated by adding --auth-mode=sso
    ## to the server command line.
    #
    ## The root URL of the OIDC identity provider.
    # issuer: https://accounts.google.com
    ## Name of a secret and a key in it to retrieve the app OIDC client ID from.
    # clientId:
    #   name: argo-server-sso
    #   key: client-id
    ## Name of a secret and a key in it to retrieve the app OIDC client secret from.
    # clientSecret:
    #   name: argo-server-sso
    #   key: client-secret
    ## The OIDC redirect URL. Should be in the form <argo-root-url>/oauth2/callback.
    # redirectUrl: https://argo/oauth2/callback
    # rbac:
    #   enabled: true
    ## When present, restricts secrets the server can read to a given list.
    ## You can use it to restrict the server to only be able to access the
    ## service account token secrets that are associated with service accounts
    ## used for authorization.
    #   secretWhitelist: []
    ## Scopes requested from the SSO ID provider.  The 'groups' scope requests
    ## group membership information, which is usually used for authorization
    ## decisions.
    # scopes:
    # - groups

# Influences the creation of the ConfigMap for the workflow-controller itself.
useDefaultArtifactRepo: false
useStaticCredentials: true
artifactRepository:
  # archiveLogs will archive the main container logs as an artifact
  archiveLogs: false
  s3:
    # Note the `key` attribute is not the actual secret, it's the PATH to
    # the contents in the associated secret, as defined by the `name` attribute.
    accessKeySecret:
      # name: <releaseName>-minio (default)
      key: accesskey
    secretKeySecret:
      # name: <releaseName>-minio
      key: secretkey
    insecure: true
    # bucket:
    # endpoint:
    # region:
    # roleARN:
    # useSDKCreds: true
  # gcs:
    # bucket: <project>-argo
    # keyFormat: "{{workflow.namespace}}/{{workflow.name}}/"
    # serviceAccountKeySecret is a secret selector.
    # It references the k8s secret named 'my-gcs-credentials'.
    # This secret is expected to have have the key 'serviceAccountKey',
    # containing the base64 encoded credentials
    # to the bucket.
    #
    # If it's running on GKE and Workload Identity is used,
    # serviceAccountKeySecret is not needed.
    # serviceAccountKeySecret:
      # name: my-gcs-credentials
      # key: serviceAccountKey


# NOTE: These are setting attributes for the `minio` optional dependency
# According to Minio, deploying Minio with this dependency chart is no longer supported. Therefor we recommend using the minio-operator chart or provision minio tenants as standalone manifests (raw Chart).
# More information: https://helm.min.io/
# This dependency might be removed in the future 
minio:
  # If set to true then chart installs minio and generate according artifactRepository section in workflow controller config map
  install: false
  defaultBucket:
    enabled: true
    name: argo-artifacts

# Minio Operator: https://github.com/minio/operator/tree/master/helm/minio-operator
# This deploys the minio operator with argo as dependency. This might not be suitable for production environments, since the minio-operator might already be deployed and managed by another helm release. In this case you should provision a new minio tenants with the extraResources key.
minio-operator:
  install: false 

# Raw Chart: https://artifacthub.io/packages/helm/main/raw
# Allows to add standalone kubernetes manifests into a helm release.
raw:
  enabled: false 

  # Converted Example Minio Tenant Example
  # Reference: https://github.com/minio/operator/blob/master/examples/tenant.yaml
  resources:

  ## Secret to be used as MinIO Root Credentials
  - |
    apiVersion: v1
    kind: Secret
    metadata:
      name: minio-creds-secret
    type: Opaque
    data:
      ## Access Key for MinIO Tenant, base64 encoded (echo -n 'minio' | base64)
      accesskey: bWluaW8=
      ## Secret Key for MinIO Tenant, base64 encoded (echo -n 'minio123' | base64)
      secretkey: bWluaW8xMjM=

  ## Secret to be used for MinIO Console
  - | 
    apiVersion: v1
    kind: Secret
    metadata:
      name: console-secret
    type: Opaque
    data:
      ## Passphrase to encrypt jwt payload, base64 encoded (echo -n 'SECRET' | base64)
      CONSOLE_PBKDF_PASSPHRASE: U0VDUkVU
      ## Salt to encrypt jwt payload, base64 encoded (echo -n 'SECRET' | base64)
      CONSOLE_PBKDF_SALT: U0VDUkVU
      ## MinIO User Access Key (used for Console Login), base64 encoded (echo -n 'YOURCONSOLEACCESS' | base64)
      CONSOLE_ACCESS_KEY: WU9VUkNPTlNPTEVBQ0NFU1M=
      ## MinIO User Secret Key (used for Console Login), base64 encoded (echo -n 'YOURCONSOLESECRET' | base64)
      CONSOLE_SECRET_KEY: WU9VUkNPTlNPTEVTRUNSRVQ=
    
  ## MinIO Tenant Definition  
  - |     
    apiVersion: minio.min.io/v2
    kind: Tenant
    metadata:
      name: minio
      ## Optionally pass labels to be applied to the statefulset pods
      labels:
        app: minio
      ## Annotations for MinIO Tenant Pods
      annotations:
        prometheus.io/path: /minio/prometheus/metrics
        prometheus.io/port: "9000"
        prometheus.io/scrape: "true"
    
    ## If a scheduler is specified here, Tenant pods will be dispatched by specified scheduler.
    ## If not specified, the Tenant pods will be dispatched by default scheduler.
    # scheduler:
    #  name: my-custom-scheduler
    
    spec:
      ## Registry location and Tag to download MinIO Server image
      image: minio/minio:RELEASE.2021-03-01T04-20-55Z
      imagePullPolicy: IfNotPresent
    
      ## Secret with credentials to be used by MinIO Tenant.
      ## Refers to the secret object created above.
      credsSecret:
        name: minio-creds-secret
    
      ## Specification for MinIO Pool(s) in this Tenant.
      pools:
          ## Servers specifies the number of MinIO Tenant Pods / Servers in this pool.
          ## For standalone mode, supply 1. For distributed mode, supply 4 or more.
          ## Note that the operator does not support upgrading from standalone to distributed mode.
        - servers: 4
    
          ## volumesPerServer specifies the number of volumes attached per MinIO Tenant Pod / Server.
          volumesPerServer: 4
    
          ## This VolumeClaimTemplate is used across all the volumes provisioned for MinIO Tenant in this
          ## Pool.
          volumeClaimTemplate:
            metadata:
              name: data
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 1Ti
    
          ## Used to specify a toleration for a pod
          # tolerations:
          #  - effect: NoSchedule
          #    key: dedicated
          #    operator: Equal
          #    value: storage
    
          ## nodeSelector parameters for MinIO Pods. It specifies a map of key-value pairs. For the pod to be
          ## eligible to run on a node, the node must have each of the
          ## indicated key-value pairs as labels.
          ## Read more here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
          # nodeSelector:
          #   disktype: ssd
    
          ## Affinity settings for MinIO pods. Read more about affinity
          ## here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity.
          # affinity:
          #   nodeAffinity:
          #     requiredDuringSchedulingIgnoredDuringExecution:
          #       nodeSelectorTerms:
          #       - matchExpressions:
          #         - key: kubernetes.io/hostname
          #           operator: In
          #           values:
          #           - hostname1
          #           - hostname2
          #   podAntiAffinity:
          #     requiredDuringSchedulingIgnoredDuringExecution:
          #     - labelSelector:
          #         matchExpressions:
          #         - key: app
          #           operator: In
          #           values:
          #           - store
          #       topologyKey: "kubernetes.io/hostname" 
    
          ## Configure resource requests and limits for MinIO containers
          # resources:
          #   requests:
          #     cpu: 250m
          #     memory: 16Gi
          #   limits:
          #     cpu: 500m
          #      memory: 16Gi
    
          ## Configure security context 
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            runAsNonRoot: true
    
      ## Mount path where PV will be mounted inside container(s).
      mountPath: /export
      ## Sub path inside Mount path where MinIO stores data.
      # subPath: /data
    
      ## Use this field to provide a list of Secrets with external certificates. This can be used to to configure
      ## TLS for MinIO Tenant pods. Create secrets as explained here:
      ## https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
      # externalCertSecret:
      #   - name: tls-ssl-minio
      #     type: kubernetes.io/tls
    
      ## Enable automatic Kubernetes based certificate generation and signing as explained in
      ## https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster
      requestAutoCert: true
    
      ## Enable S3 specific features such as Bucket DNS which would allow `buckets` to be
      ## accessible as DNS entries of form `<bucketname>.minio.default.svc.cluster.local`
      s3:
        ## This feature is turned off by default
        bucketDNS: false
    
      ## This field is used only when "requestAutoCert" is set to true. Use this field to set CommonName
      ## for the auto-generated certificate. Internal DNS name for the pod will be used if CommonName is
      ## not provided. DNS name format is *.minio.default.svc.cluster.local
      certConfig:
        commonName: ""
        organizationName: []
        dnsNames: []
    
      ## PodManagement policy for MinIO Tenant Pods. Can be "OrderedReady" or "Parallel"
      ## Refer https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
      ## for details.
      podManagementPolicy: Parallel
    
      ## serviceMetadata allows passing additional labels and annotations to MinIO and Console specific 
      ## services created by the operator.
      serviceMetadata:
        minioServiceLabels:
          label: minio-svc
        minioServiceAnnotations:
          v2.min.io: minio-svc
        consoleServiceLabels:
          label: console-svc
        consoleServiceAnnotations:
          v2.min.io: console-svc
    
      ## Add environment variables to be set in MinIO container (https://github.com/minio/minio/tree/master/docs/config)
      # env:
      # - name: MINIO_BROWSER
      #   value: "off" # to turn-off browser
      # - name: MINIO_STORAGE_CLASS_STANDARD
      #   value: "EC:2"
    
      ## PriorityClassName indicates the Pod priority and hence importance of a Pod relative to other Pods.
      ## This is applied to MinIO pods only.
      ## Refer Kubernetes documentation for details https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass/
      # priorityClassName: high-priority
    
      ## Define configuration for Console (Graphical user interface for MinIO)
      ## Refer https://github.com/minio/console
      console:
        image: minio/console:v0.6.3
        replicas: 2
        consoleSecret:
          name: console-secret
        securityContext:
          runAsUser: 1000
          runAsGroup: 2000
          runAsNonRoot: true
    
    
    
    
    
    
